This test simulates the conditions when a dune user write a toplevel module.

The module C is not exposed in the handwritten toplevel module.
The module A and B are exposed.
The module B depends on both B and C, the module C only depends on A.

  $ ocamlc -c -o main__.cmo main__.ml -bin-annot -w -49 -no-alias-deps -I .
  $ ocamlc -c -open Main__ -o main__A.cmo a.ml -bin-annot -I .
  $ ocamlc -c -open Main__ -o main__C.cmo c.ml -bin-annot -I .
  $ ocamlc -c -open Main__ -o main__B.cmo b.ml -bin-annot -I .
  $ ocamlc -c -open Main__ main.ml -bin-annot -I .

Passing the count-occurrences flag to odoc compile makes it collect the
occurrences information.

  $ odoc compile --count-occurrences -I . main__A.cmt
  $ odoc compile --count-occurrences -I . main__C.cmt
  $ odoc compile --count-occurrences -I . main__B.cmt
  $ odoc compile --count-occurrences -I . main__.cmt
  $ odoc compile --count-occurrences -I . main.cmt

  $ odoc link -I . main.odoc
  $ odoc link -I . main__A.odoc
  $ odoc link -I . main__B.odoc
  $ odoc link -I . main__C.odoc
  $ odoc link -I . main__.odoc

The count occurrences command outputs a marshalled hashtable, whose keys are
odoc identifiers, and whose values are integers corresponding to the number of
uses. We can later aggregate those hashtables, so we create the full hashtable,
and a hashtable for each compilation unit.

  $ mkdir main
  $ mkdir main__
  $ mkdir main__A
  $ mkdir main__B
  $ mkdir main__C

  $ mv main.odocl main
  $ mv main__.odocl main__
  $ mv main__A.odocl main__A
  $ mv main__B.odocl main__B
  $ mv main__C.odocl main__C
  $ odoc count-occurrences -I main -o main.occ
  $ odoc count-occurrences -I main__ -o main__.occ
  $ odoc count-occurrences -I main__A -o main__A.occ
  $ odoc count-occurrences -I main__B -o main__B.occ
  $ odoc count-occurrences -I main__C -o main__C.occ

The occurrences_print executable, available only for testing, unmarshal the file
and prints the number of occurrences in a readable format.

Uses of A are: 2 times in b.ml, 1 time in c.ml, 1 time in main.ml
Uses of B are: 1 time in main.ml
Uses of C are not counted, since the canonical destination (Main.C, generated by dune) does not exist.
Uses of B.Z are not counted since they go to a hidden module.
Uses of values Y.x and Z.y (in b.ml) are not counted since they come from a "local" module.

  $ occurrences_print main.occ | sort
  Main was used directly 0 times and indirectly 2 times
  Main.A was used directly 1 times and indirectly 0 times
  Main.B was used directly 1 times and indirectly 0 times

  $ occurrences_print main__.occ | sort

  $ occurrences_print main__A.occ | sort

  $ occurrences_print main__B.occ | sort
  Main was used directly 0 times and indirectly 7 times
  Main.A was used directly 2 times and indirectly 5 times
  Main.A.(||>) was used directly 1 times and indirectly 0 times
  Main.A.M was used directly 2 times and indirectly 0 times
  Main.A.t was used directly 1 times and indirectly 0 times
  Main.A.x was used directly 1 times and indirectly 0 times

  $ occurrences_print main__C.occ | sort
  Main was used directly 0 times and indirectly 2 times
  Main.A was used directly 1 times and indirectly 1 times
  Main.A.x was used directly 1 times and indirectly 0 times

Now we can merge both files

  $ cat > files.map << EOF
  > main__A.occ
  > main__B.occ
  > main__C.occ
  > EOF
  $ odoc aggregate-occurrences main.occ main__.occ --file-list files.map -o aggregated.txt

  $ occurrences_print aggregated.txt | sort
  Main was used directly 0 times and indirectly 11 times
  Main.A was used directly 4 times and indirectly 6 times
  Main.A.(||>) was used directly 1 times and indirectly 0 times
  Main.A.M was used directly 2 times and indirectly 0 times
  Main.A.t was used directly 1 times and indirectly 0 times
  Main.A.x was used directly 2 times and indirectly 0 times
  Main.B was used directly 1 times and indirectly 0 times

Compare with the one created directly with all occurrences:

  $ odoc count-occurrences -I . -o occurrences.txt
  $ occurrences_print occurrences.txt | sort
  Main was used directly 0 times and indirectly 11 times
  Main.A was used directly 4 times and indirectly 6 times
  Main.A.(||>) was used directly 1 times and indirectly 0 times
  Main.A.M was used directly 2 times and indirectly 0 times
  Main.A.t was used directly 1 times and indirectly 0 times
  Main.A.x was used directly 2 times and indirectly 0 times
  Main.B was used directly 1 times and indirectly 0 times

We can also include persistent ids, and hidden ids:

  $ odoc count-occurrences -I main__A -o occurrences.txt --include-own
  $ occurrences_print occurrences.txt | sort
  string was used directly 1 times and indirectly 0 times

  $ odoc count-occurrences -I main__A -o occurrences.txt --include-hidden
  $ occurrences_print occurrences.txt | sort

  $ odoc count-occurrences -I main__A -o occurrences.txt --include-own --include-hidden
  $ occurrences_print occurrences.txt | sort
  Main__A was used directly 0 times and indirectly 2 times
  Main__A.x was used directly 2 times and indirectly 0 times
  string was used directly 1 times and indirectly 0 times

  $ odoc count-occurrences -I . -o occurrences.txt --include-own
  $ occurrences_print occurrences.txt | sort
  Main was used directly 0 times and indirectly 13 times
  Main.A was used directly 4 times and indirectly 8 times
  Main.A.(||>) was used directly 1 times and indirectly 0 times
  Main.A.M was used directly 2 times and indirectly 0 times
  Main.A.t was used directly 1 times and indirectly 0 times
  Main.A.x was used directly 4 times and indirectly 0 times
  Main.B was used directly 1 times and indirectly 0 times
  string was used directly 1 times and indirectly 0 times

  $ odoc count-occurrences -I . -o occurrences.txt --include-hidden
  $ occurrences_print occurrences.txt | sort
  Main was used directly 0 times and indirectly 11 times
  Main.A was used directly 4 times and indirectly 6 times
  Main.A.(||>) was used directly 1 times and indirectly 0 times
  Main.A.M was used directly 2 times and indirectly 0 times
  Main.A.t was used directly 1 times and indirectly 0 times
  Main.A.x was used directly 2 times and indirectly 0 times
  Main.B was used directly 1 times and indirectly 0 times
  Main__ was used directly 0 times and indirectly 2 times
  Main__.C was used directly 1 times and indirectly 1 times
  Main__.C.y was used directly 1 times and indirectly 0 times
  Main__A was used directly 1 times and indirectly 0 times
  Main__B was used directly 1 times and indirectly 0 times
  Main__C was used directly 1 times and indirectly 0 times

  $ odoc count-occurrences -I . -o occurrences.txt --include-own --include-hidden
  $ occurrences_print occurrences.txt | sort
  Main was used directly 0 times and indirectly 13 times
  Main.A was used directly 4 times and indirectly 8 times
  Main.A.(||>) was used directly 1 times and indirectly 0 times
  Main.A.M was used directly 2 times and indirectly 0 times
  Main.A.t was used directly 1 times and indirectly 0 times
  Main.A.x was used directly 4 times and indirectly 0 times
  Main.B was used directly 1 times and indirectly 0 times
  Main__ was used directly 0 times and indirectly 2 times
  Main__.C was used directly 1 times and indirectly 1 times
  Main__.C.y was used directly 1 times and indirectly 0 times
  Main__A was used directly 1 times and indirectly 2 times
  Main__A.x was used directly 2 times and indirectly 0 times
  Main__B was used directly 1 times and indirectly 1 times
  Main__B.Z was used directly 0 times and indirectly 1 times
  Main__B.Z.y was used directly 1 times and indirectly 0 times
  Main__C was used directly 1 times and indirectly 0 times
  string was used directly 1 times and indirectly 0 times


REMARKS!

  $ odoc count-occurrences -I main__B -o b_only_persistent.occ
  $ odoc count-occurrences -I main__B -o b_with_own.occ --include-own
  $ occurrences_print b_only_persistent.occ | sort > only_persistent
  $ occurrences_print b_with_own.occ | sort > with_own
  $ diff only_persistent with_own | grep Main.A.x
  < Main.A.x was used directly 1 times and indirectly 0 times
  > Main.A.x was used directly 2 times and indirectly 0 times

This is because the persistent Y.x is resolved into Main.A.x. So maybe relying
on Ident.persistent is not the good way of knowing if it is persistent or not?

  $ odoc count-occurrences -I main__A -o a_with_own_and_hidden.occ --include-own --include-hidden
  $ occurrences_print a_with_own_and_hidden.occ | sort
  Main__A was used directly 0 times and indirectly 2 times
  Main__A.x was used directly 2 times and indirectly 0 times
  string was used directly 1 times and indirectly 0 times

That's a problem: it should be Main.A and Main.A.x
