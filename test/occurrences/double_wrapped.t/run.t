This test simulates the conditions when a dune user write a toplevel module.

The module C is not exposed in the handwritten toplevel module.
The module A and B are exposed.
The module B depends on both B and C, the module C only depends on A.

  $ ocamlc -c -o main__.cmo main__.ml -bin-annot -w -49 -no-alias-deps -I .
  $ ocamlc -c -open Main__ -o main__A.cmo a.ml -bin-annot -I .
  $ ocamlc -c -open Main__ -o main__C.cmo c.ml -bin-annot -I .
  $ ocamlc -c -open Main__ -o main__B.cmo b.ml -bin-annot -I .
  $ ocamlc -c -open Main__ main.ml -bin-annot -I .

Passing the count-occurrences flag to odoc compile makes it collect the
occurrences information.

  $ odoc compile --count-occurrences -I . main__A.cmt
  $ odoc compile --count-occurrences -I . main__C.cmt
  $ odoc compile --count-occurrences -I . main__B.cmt
  $ odoc compile --count-occurrences -I . main__.cmt
  $ odoc compile --count-occurrences -I . main.cmt

  $ odoc link -I . main.odoc
  $ odoc link -I . main__A.odoc
  $ odoc link -I . main__B.odoc
  $ odoc link -I . main__C.odoc
  $ odoc link -I . main__.odoc

  $ odoc html-generate -o html main.odocl
  $ odoc html-generate -o html main__A.odocl
  $ odoc html-generate -o html main__B.odocl
  $ odoc html-generate -o html main__C.odocl
  $ odoc html-generate -o html main__.odocl

The count occurrences command outputs a marshalled hashtable, whose keys are
odoc identifiers, and whose values are integers corresponding to the number of
uses. We can later aggregate those hashtables, so we create the full hashtable,
and a hashtable for each compilation unit.

  $ mkdir dir1
  $ mkdir dir2
  $ mkdir dir3
  $ mkdir dir4
  $ mkdir dir5

  $ mv main.odocl dir1
  $ mv main__.odocl dir2
  $ mv main__A.odocl dir3
  $ mv main__B.odocl dir4
  $ mv main__C.odocl dir5
  $ odoc count-occurrences -I . -o occurrences.txt
  $ odoc count-occurrences -I dir1 -o occurrences1.txt
  $ odoc count-occurrences -I dir2 -o occurrences2.txt
  $ odoc count-occurrences -I dir3 -o occurrences3.txt
  $ odoc count-occurrences -I dir4 -o occurrences4.txt
  $ odoc count-occurrences -I dir5 -o occurrences5.txt

  $ du -h occurrences.txt
  4.0K	occurrences.txt

The occurrences_print executable, available only for testing, unmarshal the file
and prints the number of occurrences in a readable format.

Uses of A are: 2 times in b.ml, 1 time in c.ml, 1 time in main.ml
Uses of B are: 1 time in main.ml
Uses of C are not counted, since the canonical destination (Main.C, generated by dune) does not exist.
Uses of B.Z are not counted since they go to a hidden module.
Uses of values Y.x and Z.y (in b.ml) are not counted since they come from a "local" module.

  $ occurrences_print occurrences.txt | sort
  Main was used directly 0 times and indirectly 13 times
  Main.A was used directly 4 times and indirectly 8 times
  Main.A.(||>) was used directly 1 times and indirectly 0 times
  Main.A.M was used directly 2 times and indirectly 0 times
  Main.A.t was used directly 1 times and indirectly 0 times
  Main.A.x was used directly 4 times and indirectly 0 times
  Main.B was used directly 1 times and indirectly 0 times
  string was used directly 1 times and indirectly 0 times

  $ occurrences_print occurrences1.txt | sort
  Main was used directly 0 times and indirectly 2 times
  Main.A was used directly 1 times and indirectly 0 times
  Main.B was used directly 1 times and indirectly 0 times

  $ occurrences_print occurrences2.txt | sort

  $ occurrences_print occurrences3.txt | sort
  string was used directly 1 times and indirectly 0 times

  $ occurrences_print occurrences4.txt | sort
  Main was used directly 0 times and indirectly 8 times
  Main.A was used directly 2 times and indirectly 6 times
  Main.A.(||>) was used directly 1 times and indirectly 0 times
  Main.A.M was used directly 2 times and indirectly 0 times
  Main.A.t was used directly 1 times and indirectly 0 times
  Main.A.x was used directly 2 times and indirectly 0 times

  $ occurrences_print occurrences5.txt | sort
  Main was used directly 0 times and indirectly 3 times
  Main.A was used directly 1 times and indirectly 2 times
  Main.A.x was used directly 2 times and indirectly 0 times

Now we can merge both files

  $ cat > files.map << EOF
  > occurrences3.txt
  > occurrences4.txt
  > occurrences5.txt
  > EOF
  $ odoc aggregate-occurrences occurrences1.txt occurrences2.txt --file-list files.map -o aggregated.txt

  $ occurrences_print aggregated.txt | sort
  Main was used directly 0 times and indirectly 13 times
  Main.A was used directly 4 times and indirectly 8 times
  Main.A.(||>) was used directly 1 times and indirectly 0 times
  Main.A.M was used directly 2 times and indirectly 0 times
  Main.A.t was used directly 1 times and indirectly 0 times
  Main.A.x was used directly 4 times and indirectly 0 times
  Main.B was used directly 1 times and indirectly 0 times
  string was used directly 1 times and indirectly 0 times
