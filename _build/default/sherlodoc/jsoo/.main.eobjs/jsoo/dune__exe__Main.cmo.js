// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cmo, use-js-string=true, version=5.8.2

//# unitInfo: Provides: Dune__exe__Main
//# unitInfo: Requires: Brr, Dune__exe__Odoc_html_frontend, Dune__exe__Tyxml, Fut, Jstr, Jv, Query, Stdlib, Stdlib__Buffer, Stdlib__List, Stdlib__Marshal, Stdlib__Result, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_js_wrap_callback_strict = runtime.caml_js_wrap_callback_strict,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$2 = ".",
    cst = "\n",
    cst$0 = " ",
    cst$1 = "",
    Jv = global_data.Jv,
    Fut = global_data.Fut,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    Dune_exe_Odoc_html_frontend = global_data.Dune__exe__Odoc_html_frontend,
    Dune_exe_Tyxml = global_data.Dune__exe__Tyxml,
    Query = global_data.Query,
    Stdlib_Marshal = global_data.Stdlib__Marshal,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Brr = global_data.Brr,
    Stdlib_Result = global_data.Stdlib__Result;
   function new$0(cl){
    var _q_ = Jv[12][cl];
    return function(_r_){return runtime.caml_js_new(_q_, _r_);};
   }
   var
    str$1 = Jv[12].sherlodoc_db(),
    _d_ = [0, caml_call1(Jv[24], "deflate")],
    dekompressor = new$0("DecompressionStream")(_d_),
    str$0 = Jv[12].atob(str$1),
    _a_ = caml_call1(Brr[1][34], str$0),
    str = caml_call1(Stdlib_Result[4], _a_),
    stream =
      new$0("ReadableStream")
       ([0,
         {start:
          caml_js_wrap_callback_strict
           (1,
            function(controller){
             controller.enqueue(str);
             controller.close();
             return 0;
            })}]),
    decompressed_stream = stream.pipeThrough(dekompressor),
    buffer = caml_call1(Stdlib_Buffer[1], 128),
    reader = decompressed_stream.getReader(),
    cst_Error = "Error : ",
    cst_error_in_string_of_stream = "error in string_of_stream";
   function read(param){
    var
     read$0 = reader.read(),
     promise = caml_call2(Fut[11], function(_p_){return _p_;}, read$0);
    return caml_call2
            (Fut[5],
             promise,
             function(param){
              if(0 !== param[0]){
               var e = param[1];
               caml_call1(Stdlib[46], cst_error_in_string_of_stream);
               var
                _k_ =
                  [0,
                   cst,
                   [0, caml_string_of_jsstring(caml_call1(Jv[32][5], e)), 0]],
                _l_ =
                  [0,
                   cst$0,
                   [0, caml_string_of_jsstring(caml_call1(Jv[32][4], e)), _k_]],
                _m_ =
                  [0,
                   cst_Error,
                   [0, caml_string_of_jsstring(caml_call1(Jv[32][2], e)), _l_]],
                _n_ = caml_call2(Stdlib_String[7], cst$1, _m_);
               caml_call1(Stdlib[42], _n_);
               return caml_call1(Fut[3], 0);
              }
              var obj = param[1], done = obj["done"] | 0, str = obj["value"];
              if(done) return caml_call1(Fut[3], 0);
              var _o_ = runtime.caml_string_of_array(str);
              caml_call2(Stdlib_Buffer[16], buffer, _o_);
              return read(0);
             });
   }
   var
    _b_ = read(0),
    _c_ =
      caml_call2
       (Fut[15][3],
        _b_,
        function(param){
         var r = caml_call1(Stdlib_Buffer[2], buffer);
         return r;
        }),
    db =
      caml_call1
       (caml_call1
         (Fut[4],
          function(str){return [0, caml_call2(Stdlib_Marshal[5], str, 0), 0];}),
        _c_);
   function search(message){
    var
     fut =
       caml_call2
        (Fut[15][3],
         db,
         function(db){
          var
           query = message["data"],
           query$0 = caml_string_of_jsstring(query),
           results = caml_call3(Query[3][1], db, 0, [0, query$0, 0, 50]),
           _f_ =
             caml_call2
              (Jv[30],
               function(param){
                var
                 doc_html = param[6],
                 kind = param[4],
                 url = param[3],
                 rhs = param[2],
                 name = param[1];
                a:
                {
                 if(typeof kind !== "number" && 1 === kind[0]){
                  var args = kind[1], typedecl_params = args;
                  break a;
                 }
                 var typedecl_params = 0;
                }
                a:
                {
                 if(typeof kind === "number" && ! kind){
                  var name$1 = 0, prefix_name = 0;
                  break a;
                 }
                 var
                  _g_ = caml_call2(Stdlib_String[17], 46, name),
                  match = caml_call1(Stdlib_List[10], _g_);
                 if(match){
                  var hd = match[1];
                  if(match[2])
                   var
                    tl = match[2],
                    name$0 = [0, hd],
                    _h_ = caml_call1(Stdlib_List[10], tl),
                    name$1 = name$0,
                    prefix_name = [0, caml_call2(Stdlib_String[7], cst$2, _h_)];
                  else
                   var name$1 = [0, hd], prefix_name = 0;
                 }
                 else
                  var name$1 = 0, prefix_name = 0;
                }
                if(typeof kind === "number")
                 switch(kind){
                   case 0:
                    var kind$0 = Dune_exe_Odoc_html_frontend[2]; break;
                   case 1:
                    var kind$0 = Dune_exe_Odoc_html_frontend[2]; break;
                   case 2:
                    var kind$0 = Dune_exe_Odoc_html_frontend[15]; break;
                   case 3:
                    var kind$0 = Dune_exe_Odoc_html_frontend[4]; break;
                   case 4:
                    var kind$0 = Dune_exe_Odoc_html_frontend[10]; break;
                   case 5:
                    var kind$0 = Dune_exe_Odoc_html_frontend[7]; break;
                   case 6:
                    var kind$0 = Dune_exe_Odoc_html_frontend[6]; break;
                   case 7:
                    var kind$0 = Dune_exe_Odoc_html_frontend[8]; break;
                   default: var kind$0 = Dune_exe_Odoc_html_frontend[14];
                 }
                else
                 switch(kind[0]){
                   case 0:
                    var kind$0 = Dune_exe_Odoc_html_frontend[13]; break;
                   case 1:
                    var kind$0 = Dune_exe_Odoc_html_frontend[3]; break;
                   case 2:
                    var kind$0 = Dune_exe_Odoc_html_frontend[9]; break;
                   case 3:
                    var kind$0 = Dune_exe_Odoc_html_frontend[5]; break;
                   case 4:
                    var kind$0 = Dune_exe_Odoc_html_frontend[11]; break;
                   default: var kind$0 = Dune_exe_Odoc_html_frontend[12];
                 }
                var
                 _i_ =
                   caml_call6
                    (Dune_exe_Odoc_html_frontend[1],
                     kind$0,
                     prefix_name,
                     name$1,
                     rhs,
                     typedecl_params,
                     doc_html),
                 html = caml_call1(Dune_exe_Tyxml[1][1], _i_),
                 _j_ = caml_call1(Jv[24], url);
                return {html: caml_call1(Jv[24], html), url: _j_};
               },
               results);
          Jv[12]["postMessage"](_f_);
          return 0;
         });
    return caml_call2(Fut[2], fut, function(_e_){return _e_;});
   }
   var o = caml_js_wrap_callback_strict(1, search);
   Jv[12]["onmessage"] = o;
   var Dune_exe_Main = [0];
   runtime.caml_register_global(36, Dune_exe_Main, "Dune__exe__Main");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
