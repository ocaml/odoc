// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.2

//# unitInfo: Provides: Query__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Query = [0], Query$0 = [0, Query];
   runtime.caml_register_global(0, Query$0, "Query__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Query__Type_parser
//# unitInfo: Requires: Db__Typexpr, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Db_Typexpr = global_data.Db__Typexpr,
    Stdlib_List = global_data.Stdlib__List,
    Error =
      [248,
       "Query__Type_parser.MenhirBasics.Error",
       runtime.caml_fresh_oo_id(0)],
    _a_ = [0, "sherlodoc/query/type_parser.ml", 285, 4];
   function eRR(s){throw caml_maybe_attach_backtrace(Error, 1);}
   function menhir_fail(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function menhir_run_01$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, w, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [1, w, 0];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_typ0,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_typ0
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_01
   (menhir_stack, menhir_lexbuf, menhir_lexer, w, menhir_s){
    return caml_trampoline
            (menhir_run_01$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, w, menhir_s));
   }
   function menhir_goto_typ0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, t, menhir_s, tok){
    var v = [0, t, 0];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_typs,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_typs
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_goto_typs
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, ts, menhir_s, tok){
    if(typeof tok === "number")
     switch(tok){
       case 1:
       case 6: break;
       default:
        var v = caml_call1(Db_Typexpr[1], ts);
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_goto_typ1,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s,
                   tok]);
        var counter$0 = counter + 1 | 0;
        return menhir_goto_typ1
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s,
                 tok);
     }
    else if(0 === tok[0]){
     var
      v_0 = tok[1],
      menhir_stack$0 = [0, menhir_stack, menhir_s, ts],
      menhir_stack$1 = [0, menhir_stack$0, v_0],
      tok$0 = caml_call1(menhir_lexer, menhir_lexbuf);
     if(typeof tok$0 === "number")
      switch(tok$0){
        case 1:
        case 6: break;
        default:
         var v_2 = 0;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_09,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v_2, tok$0]);
         var counter$2 = counter + 1 | 0;
         return menhir_run_09
                 (counter$2,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v_2,
                  tok$0);
      }
     else if(0 === tok$0[0]){
      var v_1 = tok$0[1];
      a:
      {
       var menhir_stack$2 = menhir_stack$1, v$0 = v_1, menhir_s$0 = 2;
       for(;;){
        var
         menhir_stack$3 = [0, menhir_stack$2, menhir_s$0, v$0],
         tok$1 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$1 === "number") break;
        if(0 !== tok$1[0]) break a;
        var v_0$0 = tok$1[1];
        menhir_stack$2 = menhir_stack$3;
        v$0 = v_0$0;
        menhir_s$0 = 3;
       }
       switch(tok$1){
         case 1:
         case 6: break;
         default:
          var menhir_stack$4 = menhir_stack$3, xs$0 = 0;
          for(;;){
           var
            x = menhir_stack$4[3],
            menhir_s$1 = menhir_stack$4[2],
            menhir_stack$5 = menhir_stack$4[1],
            xs = [0, x, xs$0];
           if(2 === menhir_s$1){
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_09,
                      [0, menhir_stack$5, menhir_lexbuf, menhir_lexer, xs, tok$1]);
            var counter$1 = counter + 1 | 0;
            return menhir_run_09
                    (counter$1,
                     menhir_stack$5,
                     menhir_lexbuf,
                     menhir_lexer,
                     xs,
                     tok$1);
           }
           if(3 !== menhir_s$1) return menhir_fail(0);
           menhir_stack$4 = menhir_stack$5;
           xs$0 = xs;
          }
       }
      }
      return eRR(0);
     }
     return eRR(0);
    }
    return eRR(0);
   }
   function menhir_run_09
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, ws, tok){
    var
     w = menhir_stack[2],
     menhir_stack$0 = menhir_stack[1],
     ts = menhir_stack$0[3],
     menhir_s = menhir_stack$0[2],
     menhir_stack$1 = menhir_stack$0[1],
     v =
       caml_call3
        (Stdlib_List[26],
         function(acc, w){return [1, w, [0, acc, 0]];},
         [1, w, ts],
         ws);
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_typ1,
              [0,
               menhir_stack$1,
               menhir_lexbuf,
               menhir_lexer,
               v,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_typ1
            (counter$0,
             menhir_stack$1,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_goto_typ1
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v$1, menhir_s, tok){
    if(typeof tok === "number")
     switch(tok){
       case 0:
        var
         menhir_stack$0 = [0, menhir_stack, menhir_s, v$1],
         menhir_s$0 = 5,
         tok$0 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 1:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_03$0,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
            var counter$6 = counter + 1 | 0;
            return menhir_run_03$0
                    (counter$6,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     menhir_s$0);
           case 6:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_04$0,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
            var counter$5 = counter + 1 | 0;
            return menhir_run_04$0
                    (counter$5,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     menhir_s$0);
           default:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_reduce_13$0,
                      [0,
                       menhir_stack$0,
                       menhir_lexbuf,
                       menhir_lexer,
                       menhir_s$0,
                       tok$0]);
            var counter$4 = counter + 1 | 0;
            return menhir_reduce_13$0
                    (counter$4,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     menhir_s$0,
                     tok$0);
         }
        if(0 === tok$0[0]){
         var v$2 = tok$0[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_01$0,
                   [0,
                    menhir_stack$0,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$2,
                    menhir_s$0]);
         var counter$8 = counter + 1 | 0;
         return menhir_run_01$0
                 (counter$8,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$2,
                  menhir_s$0);
        }
        var v$3 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$3,
                   menhir_s$0]);
        var counter$7 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$7,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$3,
                 menhir_s$0);
       case 1:
       case 6: break;
       default:
        var
         v = [0, v$1, 0],
         menhir_stack$1 = menhir_stack,
         xs = v,
         menhir_s$1 = menhir_s;
        for(;;)
         switch(menhir_s$1){
           case 0:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_17,
                      [0,
                       menhir_stack$1,
                       menhir_lexbuf,
                       menhir_lexer,
                       xs,
                       menhir_s$1,
                       tok]);
            var counter$0 = counter + 1 | 0;
            return menhir_run_17
                    (counter$0,
                     menhir_stack$1,
                     menhir_lexbuf,
                     menhir_lexer,
                     xs,
                     menhir_s$1,
                     tok);
           case 1:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_17,
                      [0,
                       menhir_stack$1,
                       menhir_lexbuf,
                       menhir_lexer,
                       xs,
                       menhir_s$1,
                       tok]);
            var counter$1 = counter + 1 | 0;
            return menhir_run_17
                    (counter$1,
                     menhir_stack$1,
                     menhir_lexbuf,
                     menhir_lexer,
                     xs,
                     menhir_s$1,
                     tok);
           case 4:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_17,
                      [0,
                       menhir_stack$1,
                       menhir_lexbuf,
                       menhir_lexer,
                       xs,
                       menhir_s$1,
                       tok]);
            var counter$2 = counter + 1 | 0;
            return menhir_run_17
                    (counter$2,
                     menhir_stack$1,
                     menhir_lexbuf,
                     menhir_lexer,
                     xs,
                     menhir_s$1,
                     tok);
           case 5:
            var
             x = menhir_stack$1[3],
             menhir_s$2 = menhir_stack$1[2],
             menhir_stack$2 = menhir_stack$1[1],
             v$0 = [0, x, xs];
            menhir_stack$1 = menhir_stack$2;
            xs = v$0;
            menhir_s$1 = menhir_s$2;
            break;
           case 6:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_17,
                      [0,
                       menhir_stack$1,
                       menhir_lexbuf,
                       menhir_lexer,
                       xs,
                       menhir_s$1,
                       tok]);
            var counter$3 = counter + 1 | 0;
            return menhir_run_17
                    (counter$3,
                     menhir_stack$1,
                     menhir_lexbuf,
                     menhir_lexer,
                     xs,
                     menhir_s$1,
                     tok);
           default: return menhir_fail(0);
         }
     }
    return menhir_fail(0);
   }
   function menhir_run_02$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, w, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [3, w];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_typ0,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_typ0
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_02
   (menhir_stack, menhir_lexbuf, menhir_lexer, w, menhir_s){
    return caml_trampoline
            (menhir_run_02$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, w, menhir_s));
   }
   function menhir_run_03$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var menhir_stack$0 = menhir_stack, menhir_s$0 = menhir_s;
    for(;;){
     var
      menhir_stack$1 = [0, menhir_stack$0, menhir_s$0],
      menhir_s$1 = 1,
      tok = caml_call1(menhir_lexer, menhir_lexbuf);
     if(typeof tok !== "number"){
      if(0 === tok[0]){
       var v = tok[1];
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_01$0,
                 [0,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s$1]);
       var counter$3 = counter + 1 | 0;
       return menhir_run_01$0
               (counter$3,
                menhir_stack$1,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s$1);
      }
      var v$0 = tok[1];
      if(counter >= 50)
       return caml_trampoline_return
               (menhir_run_02$0,
                [0,
                 menhir_stack$1,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s$1]);
      var counter$2 = counter + 1 | 0;
      return menhir_run_02$0
              (counter$2,
               menhir_stack$1,
               menhir_lexbuf,
               menhir_lexer,
               v$0,
               menhir_s$1);
     }
     switch(tok){
       case 1:
        menhir_stack$0 = menhir_stack$1; menhir_s$0 = menhir_s$1; break;
       case 3:
        return eRR(0);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$1]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$1,
                 menhir_stack$1,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$1);
       default:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_reduce_13$0,
                  [0,
                   menhir_stack$1,
                   menhir_lexbuf,
                   menhir_lexer,
                   menhir_s$1,
                   tok]);
        var counter$0 = counter + 1 | 0;
        return menhir_reduce_13$0
                (counter$0,
                 menhir_stack$1,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$1,
                 tok);
     }
    }
   }
   function menhir_run_03(menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    return caml_trampoline
            (menhir_run_03$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s));
   }
   function menhir_run_04$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = 0;
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_typ0,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_typ0
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_04(menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    return caml_trampoline
            (menhir_run_04$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s));
   }
   function menhir_reduce_13$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s, tok){
    var v = 0;
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_typ1,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_typ1
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_reduce_13
   (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s, tok){
    return caml_trampoline
            (menhir_reduce_13$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s, tok));
   }
   function menhir_run_17
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, xs, menhir_s, tok){
    var t = caml_call1(Db_Typexpr[1], xs);
    if(typeof tok === "number")
     switch(tok){
       case 5:
        var
         menhir_stack$0 = [0, menhir_stack, menhir_s, t],
         menhir_s$0 = 4,
         tok$0 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 1:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_03$0,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
            var counter$4 = counter + 1 | 0;
            return menhir_run_03$0
                    (counter$4,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     menhir_s$0);
           case 6:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_04$0,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
            var counter$3 = counter + 1 | 0;
            return menhir_run_04$0
                    (counter$3,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     menhir_s$0);
           default:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_reduce_13$0,
                      [0,
                       menhir_stack$0,
                       menhir_lexbuf,
                       menhir_lexer,
                       menhir_s$0,
                       tok$0]);
            var counter$2 = counter + 1 | 0;
            return menhir_reduce_13$0
                    (counter$2,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     menhir_s$0,
                     tok$0);
         }
        if(0 === tok$0[0]){
         var v$0 = tok$0[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_01$0,
                   [0,
                    menhir_stack$0,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$0,
                    menhir_s$0]);
         var counter$6 = counter + 1 | 0;
         return menhir_run_01$0
                 (counter$6,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$0,
                  menhir_s$0);
        }
        var v$1 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$1,
                   menhir_s$0]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$5,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$1,
                 menhir_s$0);
       case 0:
       case 1:
       case 6: break;
       default:
        var menhir_stack$1 = menhir_stack, v$2 = t, menhir_s$1 = menhir_s;
        for(;;)
         switch(menhir_s$1){
           case 0:
            if(typeof tok === "number" && 3 === tok) return v$2;
            return eRR(0);
           case 1:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_18,
                      [0,
                       menhir_stack$1,
                       menhir_lexbuf,
                       menhir_lexer,
                       v$2,
                       menhir_s$1,
                       tok]);
            var counter$0 = counter + 1 | 0;
            return menhir_run_18
                    (counter$0,
                     menhir_stack$1,
                     menhir_lexbuf,
                     menhir_lexer,
                     v$2,
                     menhir_s$1,
                     tok);
           case 4:
            var
             a = menhir_stack$1[3],
             menhir_s$2 = menhir_stack$1[2],
             menhir_stack$2 = menhir_stack$1[1],
             v = [0, a, v$2];
            menhir_stack$1 = menhir_stack$2;
            v$2 = v;
            menhir_s$1 = menhir_s$2;
            break;
           case 6:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_18,
                      [0,
                       menhir_stack$1,
                       menhir_lexbuf,
                       menhir_lexer,
                       v$2,
                       menhir_s$1,
                       tok]);
            var counter$1 = counter + 1 | 0;
            return menhir_run_18
                    (counter$1,
                     menhir_stack$1,
                     menhir_lexbuf,
                     menhir_lexer,
                     v$2,
                     menhir_s$1,
                     tok);
           default: return menhir_fail(0);
         }
     }
    return menhir_fail(0);
   }
   function menhir_run_18
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v$1, menhir_s, tok){
    if(typeof tok === "number"){
     var switcher = tok - 2 | 0;
     if(2 >= switcher >>> 0)
      switch(switcher){
        case 0:
         var
          v = [0, v$1, 0],
          menhir_stack$1 = menhir_stack,
          xs = v,
          menhir_s$1 = menhir_s;
         for(;;){
          if(1 === menhir_s$1){
           var
            tok$1 = caml_call1(menhir_lexer, menhir_lexbuf),
            menhir_s$2 = menhir_stack$1[2],
            menhir_stack$2 = menhir_stack$1[1];
           if(counter >= 50)
            return caml_trampoline_return
                    (menhir_goto_typs,
                     [0,
                      menhir_stack$2,
                      menhir_lexbuf,
                      menhir_lexer,
                      xs,
                      menhir_s$2,
                      tok$1]);
           var counter$4 = counter + 1 | 0;
           return menhir_goto_typs
                   (counter$4,
                    menhir_stack$2,
                    menhir_lexbuf,
                    menhir_lexer,
                    xs,
                    menhir_s$2,
                    tok$1);
          }
          if(6 > menhir_s$1) return menhir_fail(0);
          var
           x = menhir_stack$1[3],
           menhir_s$3 = menhir_stack$1[2],
           menhir_stack$3 = menhir_stack$1[1],
           v$0 = [0, x, xs];
          menhir_stack$1 = menhir_stack$3;
          xs = v$0;
          menhir_s$1 = menhir_s$3;
         }
         break;
        case 1: break;
        default:
         var
          menhir_stack$0 = [0, menhir_stack, menhir_s, v$1],
          menhir_s$0 = 6,
          tok$0 = caml_call1(menhir_lexer, menhir_lexbuf);
         if(typeof tok$0 === "number")
          switch(tok$0){
            case 1:
             if(counter >= 50)
              return caml_trampoline_return
                      (menhir_run_03$0,
                       [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
             var counter$2 = counter + 1 | 0;
             return menhir_run_03$0
                     (counter$2,
                      menhir_stack$0,
                      menhir_lexbuf,
                      menhir_lexer,
                      menhir_s$0);
            case 3:
             return eRR(0);
            case 6:
             if(counter >= 50)
              return caml_trampoline_return
                      (menhir_run_04$0,
                       [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
             var counter$1 = counter + 1 | 0;
             return menhir_run_04$0
                     (counter$1,
                      menhir_stack$0,
                      menhir_lexbuf,
                      menhir_lexer,
                      menhir_s$0);
            default:
             if(counter >= 50)
              return caml_trampoline_return
                      (menhir_reduce_13$0,
                       [0,
                        menhir_stack$0,
                        menhir_lexbuf,
                        menhir_lexer,
                        menhir_s$0,
                        tok$0]);
             var counter$0 = counter + 1 | 0;
             return menhir_reduce_13$0
                     (counter$0,
                      menhir_stack$0,
                      menhir_lexbuf,
                      menhir_lexer,
                      menhir_s$0,
                      tok$0);
          }
         if(0 === tok$0[0]){
          var v$2 = tok$0[1];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_01$0,
                    [0,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     v$2,
                     menhir_s$0]);
          var counter$5 = counter + 1 | 0;
          return menhir_run_01$0
                  (counter$5,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$2,
                   menhir_s$0);
         }
         var v$3 = tok$0[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_02$0,
                   [0,
                    menhir_stack$0,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$3,
                    menhir_s$0]);
         var counter$3 = counter + 1 | 0;
         return menhir_run_02$0
                 (counter$3,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$3,
                  menhir_s$0);
      }
    }
    return eRR(0);
   }
   function main(menhir_lexer, menhir_lexbuf){
    var
     menhir_stack = 0,
     menhir_s = 0,
     tok = caml_call1(menhir_lexer, menhir_lexbuf);
    if(typeof tok === "number")
     switch(tok){
       case 1:
        return menhir_run_03
                (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s);
       case 6:
        return menhir_run_04
                (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s);
       case 2:
       case 4:
        return eRR(0);
       default:
        return menhir_reduce_13
                (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s, tok);
     }
    if(0 === tok[0]){
     var v = tok[1];
     return menhir_run_01
             (menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s);
    }
    var v$0 = tok[1];
    return menhir_run_02
            (menhir_stack, menhir_lexbuf, menhir_lexer, v$0, menhir_s);
   }
   var Query_Type_parser = [0, Error, main];
   runtime.caml_register_global(15, Query_Type_parser, "Query__Type_parser");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Query__Type_lexer
//# unitInfo: Requires: Stdlib__Lexing
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    ocaml_lex_tables =
      [0,
       "\0\0\xf6\xffT\0\xc0\0\xf9\xff\x14\x01\xfb\xff\xfc\xff\xfd\xff\0\0\xff\xff\xfe\xff",
       "\xff\xff\xff\xff\b\0\x07\0\xff\xff\x05\0\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff",
       "\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\0\0\xff\xff\0\0\0\0",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\b\0\x07\0\x04\0\0\0\x06\0\t\0\x02\0\0\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\0\0\0\0\0\0\0\0\x0b\0\0\0\0\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\0\0\0\0\0\0\0\0\x05\0\0\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\0\0\0\0\0\0\0\0\x02\0\0\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\0\0\0\0\0\0\0\0\x03\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\0\0\0\0\0\0\0\0\x02\0\0\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\xff\xff\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\xff\xff\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x05\0\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\x05\0\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       cst,
       cst,
       cst,
       cst,
       cst,
       cst],
    Stdlib_Lexing = global_data.Stdlib__Lexing;
   function token$0(counter, lexbuf){
    var _a_ = 0;
    if(counter >= 50)
     return caml_trampoline_return(ocaml_lex_token_rec$0, [0, lexbuf, _a_]);
    var counter$0 = counter + 1 | 0;
    return ocaml_lex_token_rec$0(counter$0, lexbuf, _a_);
   }
   function token(lexbuf){return caml_trampoline(token$0(0, lexbuf));}
   function ocaml_lex_token_rec$0(counter, lexbuf, ocaml_lex_state){
    var ocaml_lex_state$0 = ocaml_lex_state;
    for(;;){
     var
      ocaml_lex_state$1 =
        caml_call3
         (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
     if(9 >= ocaml_lex_state$1 >>> 0)
      switch(ocaml_lex_state$1){
        case 0:
         if(counter >= 50)
          return caml_trampoline_return(token$0, [0, lexbuf]);
         var counter$0 = counter + 1 | 0;
         return token$0(counter$0, lexbuf);
        case 1:
         return 5;
        case 2:
         return 1;
        case 3:
         return 2;
        case 4:
         return 4;
        case 5:
         return 6;
        case 6:
         return 0;
        case 7:
         var
          p =
            caml_call3
             (Stdlib_Lexing[16], lexbuf, lexbuf[5] + 1 | 0, lexbuf[6]);
         return [1, p];
        case 8:
         var w = caml_call3(Stdlib_Lexing[16], lexbuf, lexbuf[5], lexbuf[6]);
         return [0, w];
        default: return 3;
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state$0 = ocaml_lex_state$1;
    }
   }
   function ocaml_lex_token_rec(lexbuf, ocaml_lex_state){
    return caml_trampoline(ocaml_lex_token_rec$0(0, lexbuf, ocaml_lex_state));
   }
   var Query_Type_lexer = [0, ocaml_lex_tables, token, ocaml_lex_token_rec];
   runtime.caml_register_global(2, Query_Type_lexer, "Query__Type_lexer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Query__Name_cost
//# unitInfo: Requires: Stdlib__Char, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_List = global_data.Stdlib__List,
    _a_ = [0, 46, [0, 40, [0, 41, 0]]],
    _b_ = [0, 0, 0, 0];
   function prefix_at(sub, s, j$3){
    var case$0 = 0, i = 0, j = j$3;
    for(;;){
     if(caml_ml_string_length(sub) <= i) return [0, case$0];
     var _e_ = caml_string_get(s, j);
     if(caml_string_get(sub, i) === _e_){
      var j$0 = j + 1 | 0, i$0 = i + 1 | 0;
      i = i$0;
      j = j$0;
     }
     else{
      var _f_ = caml_string_get(s, j), _g_ = caml_call1(Stdlib_Char[3], _f_);
      if(caml_string_get(sub, i) === _g_){
       var j$1 = j + 1 | 0, i$1 = i + 1 | 0, case$1 = case$0 + 3 | 0;
       case$0 = case$1;
       i = i$1;
       j = j$1;
      }
      else{
       var _h_ = caml_string_get(s, j), _i_ = caml_string_get(sub, i);
       if(caml_call1(Stdlib_Char[3], _i_) !== _h_) return 0;
       var j$2 = j + 1 | 0, i$2 = i + 1 | 0, case$2 = case$0 + 10 | 0;
       case$0 = case$2;
       i = i$2;
       j = j$2;
      }
     }
    }
   }
   function find_all(sub, s){
    var j = 0, acc = 0;
    for(;;){
     if(caml_ml_string_length(s) < (j + caml_ml_string_length(sub) | 0))
      return acc;
     var match = prefix_at(sub, s, j);
     if(match)
      var cost = match[1], acc$0 = [0, [0, j, cost], acc];
     else
      var acc$0 = acc;
     var j$0 = j + 1 | 0;
     j = j$0;
     acc = acc$0;
    }
   }
   function is_substring(sub, s){return 0 !== find_all(sub, s) ? 1 : 0;}
   function word_boundary(s, i){
    if(0 > i) return 0;
    if(caml_ml_string_length(s) > i){
     var _d_ = caml_string_get(s, i);
     if(! caml_call2(Stdlib_List[37], _d_, _a_))
      return 95 === caml_string_get(s, i) ? 3 : 10;
    }
    return 1;
   }
   function best_match(opt, sub, str){
    var after = opt ? opt[1] : 0, _c_ = find_all(sub, str);
    return caml_call3
            (Stdlib_List[26],
             function(acc, param){
              var
               case_cost = param[2],
               i = param[1],
               left = word_boundary(str, i - 1 | 0),
               right =
                 word_boundary(str, i + caml_ml_string_length(sub) | 0) / 3
                 | 0,
               is_after = after <= i ? 0 : 10,
               cost = ((case_cost + left | 0) + right | 0) + is_after | 0;
              if(acc){var cost$0 = acc[1][2]; if(cost$0 < cost) return acc;}
              return [0, [0, i, cost]];
             },
             0,
             _c_);
   }
   function best_matches(words, str){
    var
     match =
       caml_call3
        (Stdlib_List[26],
         function(param, sub){
          var
           not_found = param[3],
           found = param[2],
           i = param[1],
           match = best_match([0, i], sub, str);
          if(! match)
           return [0,
                   i,
                   found,
                   (not_found + caml_ml_string_length(sub) | 0) + 50 | 0];
          var match$0 = match[1], cost = match$0[2], i$0 = match$0[1];
          return [0,
                  i$0 + caml_ml_string_length(sub) | 0,
                  found + cost | 0,
                  not_found];
         },
         _b_,
         words),
     not_found = match[3],
     found = match[2];
    return found + not_found | 0;
   }
   var
    Query_Name_cost =
      [0,
       prefix_at,
       find_all,
       is_substring,
       word_boundary,
       best_match,
       best_matches];
   runtime.caml_register_global(4, Query_Name_cost, "Query__Name_cost");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Query__Type_distance
//# unitInfo: Requires: Db__Type_polarity, Query__Name_cost, Stdlib, Stdlib__Array, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_compare = runtime.caml_compare,
    caml_make_vect = runtime.caml_make_vect;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Query_Name_cost = global_data.Query__Name_cost,
    Db_Type_polarity = global_data.Db__Type_polarity;
   function rev_concat(lst){
    return caml_call3
            (Stdlib_List[26],
             function(acc, xs){return caml_call2(Stdlib_List[13], xs, acc);},
             0,
             lst);
   }
   function _a_(prefix, t){
    if(typeof t === "number") return 0 === t ? [0, [0, 1, prefix], 0] : 0;
    switch(t[0]){
      case 0:
       var
        b = t[2],
        a = t[1],
        prefix_left = [0, 2, prefix],
        prefix_right = [0, 3, prefix],
        _u_ = _a_(prefix_right, b),
        _v_ = _a_(prefix_left, a);
       return caml_call2(Stdlib_List[13], _v_, _u_);
      case 1:
       var args = t[2], name = t[1], prefix$0 = [0, [0, name], prefix];
       if(! args) return [0, prefix$0, 0];
       var length = caml_call1(Stdlib_List[1], args);
       return rev_concat
               (caml_call2
                 (Stdlib_List[21],
                  function(i, arg){
                   var prefix = [0, [2, i, length], prefix$0];
                   return _a_(prefix, arg);
                  },
                  args));
      case 2:
       var args$0 = t[1], length$0 = caml_call1(Stdlib_List[1], args$0);
       return rev_concat
               (caml_call1
                 (caml_call1
                   (Stdlib_List[21],
                    function(i, arg){
                     var prefix$0 = [0, [1, i, length$0], prefix];
                     return _a_(prefix$0, arg);
                    }),
                  args$0));
      default: return [0, [0, 0, prefix], 0];
    }
   }
   function paths_of_type(t){
    var _t_ = _a_(0, t);
    return caml_call1(caml_call1(Stdlib_List[20], Stdlib_List[10]), _t_);
   }
   function v(query_paths, entry){
    var entry_paths = paths_of_type(entry);
    if(query_paths && entry_paths){
     var
      arr$0 =
        caml_call2
         (Stdlib_List[20],
          function(xs){
           return caml_call2
                   (Stdlib_List[20],
                    function(ys){
                     var
                      len_xs = caml_call1(Stdlib_List[1], xs),
                      len_ys = caml_call1(Stdlib_List[1], ys),
                      cache =
                        caml_call3
                         (Stdlib_Array[2], 1 + len_xs | 0, 1 + len_ys | 0, -1),
                      inv = Db_Type_polarity[1][2];
                     function memo(xsgn, ysgn, i, j, xs, ys){
                      var
                       r =
                         caml_check_bound(caml_check_bound(cache, i)[1 + i], j)
                          [1 + j];
                      if(0 <= r) return r;
                      var r$0 = go(xsgn, ysgn, i, j, xs, ys);
                      caml_check_bound(caml_check_bound(cache, i)[1 + i], j)
                       [1 + j]
                      = r$0;
                      return r$0;
                     }
                     function go(xsgn, ysgn, i, j, xs, ys){
                      if(! xs) return ys ? 0 : 0;
                      var x = xs[1];
                      a:
                      {
                       b:
                       {
                        c:
                        {
                         d:
                         {
                          e:
                          {
                           if(typeof x === "number")
                            switch(x){
                              case 0:
                               if(! xs[2]){
                                if(! ys) break c;
                                var _q_ = ys[1];
                                if
                                 (typeof _q_ === "number"
                                  && 2 > _q_ && ! ys[2] && xsgn === ysgn)
                                 return 0;
                               }
                               break;
                              case 1:
                               if(! xs[2] && xsgn === ysgn) return 0; break;
                              case 2:
                               if(! ys) break e;
                               var _r_ = ys[1];
                               if(typeof _r_ === "number" && 2 === _r_){
                                var ys$9 = ys[2], xs$7 = xs[2], _s_ = caml_call1(inv, ysgn);
                                return memo
                                        (caml_call1(inv, xsgn),
                                         _s_,
                                         i + 1 | 0,
                                         j + 1 | 0,
                                         xs$7,
                                         ys$9);
                               }
                               break;
                            }
                           if(ys){
                            var ys$0 = ys[2], y = ys[1], xs$0 = xs[2];
                            if(runtime.caml_equal(x, y) && xsgn === ysgn)
                             return memo(xsgn, ysgn, i + 1 | 0, j + 1 | 0, xs$0, ys$0);
                            if(typeof x === "number"){if(2 === x) break e;}
                            else
                             f:
                             switch(x[0]){
                               case 0:
                                var match = ys[1], xs$4 = xs[2], x$0 = x[1];
                                if(typeof match === "number")
                                 switch(match){case 2: break f;case 3: break d;}
                                else if(0 === match[0]){
                                 var ys$6 = ys[2], y$0 = match[1];
                                 if(xsgn !== ysgn) break a;
                                 var match$0 = caml_call3(Query_Name_cost[5], 0, x$0, y$0);
                                 if(! match$0)
                                  return 10 + memo(xsgn, ysgn, i, j + 1 | 0, xs, ys$6) | 0;
                                 var cost = match$0[1][2];
                                 return (cost / 3 | 0)
                                        + memo(xsgn, ysgn, i + 1 | 0, j + 1 | 0, xs$4, ys$6)
                                        | 0;
                                }
                                break a;
                               case 1:
                                var _o_ = ys[1], xs$5 = xs[2];
                                if(typeof _o_ === "number")
                                 switch(_o_){case 2: break f;case 3: break d;}
                                else if(1 === _o_[0]){
                                 var ys$7 = ys[2];
                                 return 1
                                        + memo(xsgn, ysgn, i + 1 | 0, j + 1 | 0, xs$5, ys$7)
                                        | 0;
                                }
                                break b;
                               default:
                                var _p_ = ys[1], xs$6 = xs[2];
                                if(typeof _p_ === "number")
                                 switch(_p_){case 2: break f;case 3: break d;}
                                else if(2 === _p_[0]){
                                 var ys$8 = ys[2];
                                 return 1
                                        + memo(xsgn, ysgn, i + 1 | 0, j + 1 | 0, xs$6, ys$8)
                                        | 0;
                                }
                                break a;
                             }
                            var _j_ = ys[1];
                            if(typeof _j_ === "number" && 2 === _j_){
                             var ys$1 = ys[2];
                             return 1
                                    + memo(xsgn, caml_call1(inv, ysgn), i, j + 1 | 0, xs, ys$1)
                                    | 0;
                            }
                           }
                          }
                          var _k_ = xs[1];
                          if(typeof _k_ !== "number") break c;
                          if(2 === _k_){
                           var xs$1 = xs[2];
                           return 1
                                  + memo(caml_call1(inv, xsgn), ysgn, i + 1 | 0, j, xs$1, ys)
                                  | 0;
                          }
                         }
                         if(ys){
                          var _l_ = ys[1];
                          if(typeof _l_ === "number" && 3 <= _l_){
                           var ys$2 = ys[2];
                           return memo(xsgn, ysgn, i, j + 1 | 0, xs, ys$2);
                          }
                         }
                         var _m_ = xs[1];
                         if(typeof _m_ === "number" && 3 === _m_){
                          var xs$3 = xs[2];
                          return memo(xsgn, ysgn, i + 1 | 0, j, xs$3, ys);
                         }
                        }
                        if(! ys) return 10000;
                       }
                       if(typeof xs[1] !== "number"){
                        var xs$2 = xs[2];
                        return 1 + memo(xsgn, ysgn, i + 1 | 0, j, xs$2, ys) | 0;
                       }
                      }
                      var _n_ = ys[1];
                      if(typeof _n_ === "number") return 10000;
                      switch(_n_[0]){
                        case 0:
                         var ys$3 = ys[2];
                         return 10 + memo(xsgn, ysgn, i, j + 1 | 0, xs, ys$3) | 0;
                        case 1:
                         var ys$4 = ys[2];
                         return 1 + memo(xsgn, ysgn, i, j + 1 | 0, xs, ys$4) | 0;
                        default:
                         var ys$5 = ys[2];
                         return memo(xsgn, ysgn, i, j + 1 | 0, xs, ys$5);
                      }
                     }
                     var pos = 0;
                     return go(pos, pos, 0, 0, xs, ys);
                    },
                    entry_paths);
          },
          query_paths);
     if(! arr$0) return 0;
     var
      _b_ = caml_call1(Stdlib_List[6], arr$0),
      used = caml_make_vect(caml_call1(Stdlib_List[1], _b_), 0),
      _c_ = caml_call1(Stdlib_Array[11], arr$0),
      arr =
        caml_call1
         (caml_call1
           (Stdlib_Array[14],
            function(lst){
             var
              lst$0 =
                caml_call2
                 (Stdlib_List[21], function(i, x){return [0, x, i];}, lst);
             return caml_call2(Stdlib_List[59], caml_compare, lst$0);
            }),
          _c_);
     caml_call2(Stdlib_Array[35], caml_compare, arr);
     var
      heuristics = caml_make_vect(arr.length + 0 | 0, 0),
      _d_ = heuristics.length - 3 | 0;
     if(_d_ >= 0){
      var i = _d_;
      for(;;){
       var
        _e_ = caml_check_bound(arr, i)[1 + i],
        best$0 = caml_call1(Stdlib_List[6], _e_)[1],
        _f_ = i + 1 | 0,
        _g_ = caml_check_bound(heuristics, _f_)[1 + _f_] + best$0 | 0;
       caml_check_bound(heuristics, i)[1 + i] = _g_;
       var _h_ = i - 1 | 0;
       if(0 === i) break;
       i = _h_;
      }
     }
     var
      best = [0, 1000],
      limit = [0, 0],
      go =
        function(rem, acc, i){
         limit[1]++;
         if(10000 < limit[1]) return 0;
         if(0 >= rem){
          var score$0 = acc + (1000 * (arr.length - 1 - i | 0) | 0) | 0;
          best[1] = caml_call2(Stdlib[16], score$0, best[1]);
          return 1;
         }
         if(arr.length - 1 <= i){
          var score = acc + (5 * rem | 0) | 0;
          best[1] = caml_call2(Stdlib[16], score, best[1]);
          return 1;
         }
         var _i_ = best[1];
         if(_i_ <= (acc + caml_check_bound(heuristics, i)[1 + i] | 0))
          return 1;
         var param = caml_check_bound(arr, i)[1 + i];
         for(;;){
          if(! param) return 1;
          var
           rest = param[2],
           match = param[1],
           j = match[2],
           cost = match[1];
          if(caml_check_bound(used, j)[1 + j])
           var continue$0 = 1;
          else{
           caml_check_bound(used, j)[1 + j] = 1;
           var continue$1 = go(rem - 1 | 0, acc + cost | 0, i + 1 | 0);
           used[1 + j] = 0;
           var continue$0 = continue$1;
          }
          if(! continue$0) return 0;
          param = rest;
         }
        };
     go(used.length - 1, 0, 0);
     return best[1];
    }
    return 0;
   }
   var Query_Type_distance = [0, paths_of_type, v];
   runtime.caml_register_global
    (5, Query_Type_distance, "Query__Type_distance");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Query__Query_parser
//# unitInfo: Requires: Db__Typexpr, Query__Type_lexer, Query__Type_parser, Stdlib, Stdlib__Lexing, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = " ",
    cst$1 = " : ",
    cst = "",
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Db_Typexpr = global_data.Db__Typexpr,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Query_Type_lexer = global_data.Query__Type_lexer,
    Query_Type_parser = global_data.Query__Type_parser,
    cst_parsing_error = " : <parsing error>";
   function type_of_string(str$0){
    var i = 0, open_parens = 0, close_parens = 0;
    for(;;){
     if(caml_ml_string_length(str$0) <= i){
      var
       _i_ = caml_call2(Stdlib_String[1], open_parens, 41),
       _j_ = caml_call2(Stdlib[28], str$0, _i_),
       _k_ = caml_call2(Stdlib_String[1], close_parens, 40),
       str = caml_call2(Stdlib[28], _k_, _j_),
       lexbuf = caml_call2(Stdlib_Lexing[3], 0, str);
      try{
       var
        _l_ =
          [0,
           5795659,
           caml_call2(Query_Type_parser[2], Query_Type_lexer[2], lexbuf)];
       return _l_;
      }
      catch(_m_){return 901335932;}
     }
     var match = caml_string_get(str$0, i);
     if(40 === match){
      var open_parens$0 = open_parens + 1 | 0, i$0 = i + 1 | 0;
      i = i$0;
      open_parens = open_parens$0;
     }
     else if(41 === match)
      if(0 < open_parens){
       var open_parens$1 = open_parens - 1 | 0, i$1 = i + 1 | 0;
       i = i$1;
       open_parens = open_parens$1;
      }
      else{
       var close_parens$0 = close_parens + 1 | 0, i$2 = i + 1 | 0;
       i = i$2;
       close_parens = close_parens$0;
      }
     else{var i$3 = i + 1 | 0; i = i$3;}
    }
   }
   function of_string(str){
    var match = caml_call2(Stdlib_String[37], str, 58);
    if(match)
     var
      loc = match[1],
      str_name = caml_call3(Stdlib_String[16], str, 0, loc),
      str_typ =
        caml_call3
         (Stdlib_String[16],
          str,
          loc + 1 | 0,
          (caml_ml_string_length(str) - loc | 0) - 1 | 0),
      typ = type_of_string(str_typ),
      query_name = str_name;
    else{
     var _d_ = 1 <= caml_ml_string_length(str) ? 1 : 0;
     a:
     {
      if(_d_){
       var _e_ = 39 === caml_string_get(str, 0) ? 1 : 0;
       if(_e_)
        var _f_ = _e_;
       else{
        var _g_ = caml_call2(Stdlib_String[15], str, 45);
        if(! _g_){var _h_ = caml_call2(Stdlib_String[15], str, 40); break a;}
        var _f_ = _g_;
       }
      }
      else
       var _f_ = _d_;
      var _h_ = _f_;
     }
     if(_h_)
      var typ = type_of_string(str), query_name = cst;
     else
      var typ = 601868557, query_name = str;
    }
    var
     _c_ = caml_call2(Stdlib_String[17], 32, query_name),
     name =
       caml_call2
        (Stdlib_List[44],
         function(s){return 0 < caml_ml_string_length(s) ? 1 : 0;},
         _c_);
    return [0, name, typ];
   }
   function to_string(param){
    var
     typ = param[2],
     name = param[1],
     words = caml_call2(Stdlib_String[7], cst$0, name);
    if(typeof typ === "number")
     return 901335932 <= typ
             ? caml_call2(Stdlib[28], words, cst_parsing_error)
             : words;
    var
     typ$0 = typ[2],
     _a_ = caml_call1(Db_Typexpr[3], typ$0),
     _b_ = caml_call2(Stdlib[28], cst$1, _a_);
    return caml_call2(Stdlib[28], words, _b_);
   }
   var Query_Query_parser = [0, of_string, to_string];
   runtime.caml_register_global(11, Query_Query_parser, "Query__Query_parser");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Query__Dynamic_cost
//# unitInfo: Requires: Db__Entry, Query__Name_cost, Query__Type_distance
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Query_Name_cost = global_data.Query__Name_cost,
    Db_Entry = global_data.Db__Entry,
    Query_Type_distance = global_data.Query__Type_distance,
    _a_ = [0, 1000];
   function of_query(param){
    var typ = param[2], name = param[1];
    a:
    {
     if(typeof typ !== "number" && 5795659 === typ[1]){
      var t = typ[2], type_paths = [0, caml_call1(Query_Type_distance[1], t)];
      break a;
     }
     var type_paths = 0;
    }
    return [0, name, type_paths];
   }
   function type_distance(query_type, entry){
    var match = caml_call1(Db_Entry[1][2], entry[4]);
    if(! query_type) return 0;
    var query_paths = query_type[1];
    if(! match) return _a_;
    var entry_type = match[1];
    return [0, caml_call2(Query_Type_distance[2], query_paths, entry_type)];
   }
   function score(query, entry){
    var
     name_matches = caml_call2(Query_Name_cost[6], query[1], entry[1]),
     match = type_distance(query[2], entry);
    if(match) var cost = match[1], type_cost = cost; else var type_cost = 0;
    return 5 * (name_matches + type_cost | 0) | 0;
   }
   var Query_Dynamic_cost = [0, of_query, type_distance, score];
   runtime.caml_register_global(4, Query_Dynamic_cost, "Query__Dynamic_cost");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Query__Io
//# unitInfo: Requires: Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List;
   function Seq(Io){
    function of_seq(s, param){
     var match = caml_call1(s, 0);
     if(! match) return caml_call1(Io[1], 0);
     var xs = match[2], x = match[1];
     return caml_call1(Io[1], [0, x, function(_g_){return of_seq(xs, _g_);}]);
    }
    function take(n, xs, param){
     if(0 === n) return caml_call1(Io[1], 0);
     var _d_ = caml_call1(xs, 0);
     return caml_call1
             (caml_call1(Io[2], _d_),
              function(param){
               if(! param) return 0;
               var xs = param[2], x = param[1], _e_ = n - 1 | 0;
               return [0, x, function(_f_){return take(_e_, xs, _f_);}];
              });
    }
    function _a_(acc, s){
     var _b_ = caml_call1(s, 0);
     return caml_call1
             (caml_call1(Io[3], _b_),
              function(param){
               if(param){
                var xs = param[2], x = param[1];
                return _a_([0, x, acc], xs);
               }
               var _c_ = caml_call1(Stdlib_List[10], acc);
               return caml_call1(Io[1], _c_);
              });
    }
    function to_list(s){return _a_(0, s);}
    return [0, of_seq, take, to_list];
   }
   var Query_Io = [0, Seq];
   runtime.caml_register_global(1, Query_Io, "Query__Io");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Query__Top_results
//# unitInfo: Requires: Db__Entry, Query__Dynamic_cost, Query__Io, Stdlib__List, Stdlib__Set
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Query_Io = global_data.Query__Io,
    Query_Dynamic_cost = global_data.Query__Dynamic_cost,
    Db_Entry = global_data.Db__Entry,
    Stdlib_Set = global_data.Stdlib__Set,
    Bests = caml_call1(Stdlib_Set[1], [0, Db_Entry[6]]),
    empty = [0, 0, Bests[1]];
   function update_entry(query, entry){
    var extra_cost = caml_call2(Query_Dynamic_cost[3], query, entry);
    return [0,
            entry[1],
            entry[2],
            entry[3],
            entry[4],
            entry[5] + extra_cost | 0,
            entry[6],
            entry[7]];
   }
   function Make(IO){
    var Seq = caml_call1(Query_Io[1], IO);
    function of_seq(query, limit, seq){
     function go(total_seen, t, seq){
      if((limit + 10 | 0) <= total_seen) return caml_call1(IO[1], t);
      var _c_ = caml_call1(seq, 0);
      return caml_call1
              (caml_call1(IO[3], _c_),
               function(param){
                if(! param) return caml_call1(IO[1], t);
                var xs = param[2], elt$1 = param[1];
                if(t[1] < limit)
                 var
                  elt = update_entry(query, elt$1),
                  _d_ = caml_call2(Bests[2], elt, t[2]),
                  match = [0, [0, t[1] + 1 | 0, _d_]];
                else{
                 var worst = caml_call1(Bests[13], t[2]);
                 if(worst[5] < elt$1[5])
                  var match = [1, t];
                 else{
                  var elt$0 = update_entry(query, elt$1);
                  if(worst[5] < elt$0[5])
                   var match = [0, t];
                  else
                   var
                    _e_ = caml_call2(Bests[4], worst, t[2]),
                    _f_ = caml_call1(caml_call1(Bests[2], elt$0), _e_),
                    match = [0, [0, t[1], _f_]];
                 }
                }
                if(0 === match[0]){
                 var t$0 = match[1];
                 return go(total_seen + 1 | 0, t$0, xs);
                }
                var t$1 = match[1];
                return caml_call1(IO[1], t$1);
               });
     }
     var _a_ = go(0, empty, seq);
     return caml_call1
             (caml_call1(IO[2], _a_),
              function(t){
               var _b_ = caml_call1(Bests[40], t[2]);
               return caml_call1(Stdlib_List[65], _b_);
              });
    }
    return [0, Seq, of_seq];
   }
   var Query_Top_results = [0, Make];
   runtime.caml_register_global(5, Query_Top_results, "Query__Top_results");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Query__Priority_queue
//# unitInfo: Requires: Db__Entry, Db__String_automata, Stdlib__Array, Stdlib__List, Stdlib__Option
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_sherlodoc_query_priority_q = "sherlodoc/query/priority_queue.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_notequal = runtime.caml_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Db_String_automata = global_data.Db__String_automata,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    Db_Entry = global_data.Db__Entry,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_Array = global_data.Stdlib__Array,
    _a_ = [0, cst_sherlodoc_query_priority_q, 33, 14],
    _b_ = [0, cst_sherlodoc_query_priority_q, 81, 13],
    _c_ = [0, cst_sherlodoc_query_priority_q, 94, 6],
    _d_ = [0, cst_sherlodoc_query_priority_q, 95, 6],
    _e_ = [0, cst_sherlodoc_query_priority_q, 121, 10];
   function size(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var arr = param[2], i = param[1]; return arr.length - 1 - i | 0;
      case 1:
       var s = param[2]; return caml_call1(Db_String_automata[5], s);
      default:
       var xs = param[2];
       return caml_call3
               (Stdlib_List[26],
                function(acc, x){return acc + size(x) | 0;},
                0,
                xs);
    }
   }
   function minimum(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){
     var arr = param[2], i = param[1];
     return [0, caml_check_bound(arr, i)[1 + i]];
    }
    var elt = param[1];
    return [0, elt];
   }
   function of_sorted_array(arr){return [0, 0, arr];}
   function of_automata(s){
    var elt = caml_call1(Db_String_automata[4], s);
    return [1, elt, s];
   }
   function of_list(lst){
    var
     lst$0 =
       caml_call2
        (Stdlib_List[44], function(_k_){return caml_notequal(0, _k_);}, lst);
    function min(x){
     var match = minimum(x);
     if(! match)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     var elt = match[1];
     return elt;
    }
    function compare(a, b){
     var _i_ = min(b), _j_ = min(a);
     return caml_call2(Db_Entry[6], _j_, _i_);
    }
    var lst$1 = caml_call2(Stdlib_List[59], compare, lst$0);
    if(! lst$1) return 0;
    var hd = lst$1[1];
    return [2, min(hd), lst$1];
   }
   function insert_sort(x, lst){
    var match = minimum(x);
    if(! match) return lst;
    var min_elt = match[1];
    function insert(lst){
     var lst$0 = lst;
     for(;;){
      if(! lst$0) return [0, x, 0];
      var lst$1 = lst$0[2], y = lst$0[1], match = minimum(y);
      if(match){
       var min_y = match[1];
       return 0 < caml_call2(Db_Entry[6], min_elt, min_y)
               ? [0, y, insert(lst$1)]
               : [0, x, lst$0];
      }
      lst$0 = lst$1;
     }
    }
    return insert(lst);
   }
   function pop_until(cond, t$2){
    var t$3 = t$2;
    for(;;){
     if(typeof t$3 === "number") return 0;
     switch(t$3[0]){
       case 0:
        var
         arr$0 = t$3[2],
         i = t$3[1],
         search =
           function(i, j){
            var i$0 = i, j$0 = j;
            for(;;){
             if(caml_call1(cond, caml_check_bound(arr$0, i$0)[1 + i$0]))
              throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
             if(! caml_call1(cond, caml_check_bound(arr$0, j$0)[1 + j$0]))
              throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
             var m = (i$0 + j$0 | 0) / 2 | 0;
             if(i$0 === m) return [0, j$0, arr$0];
             if(caml_call1(cond, caml_check_bound(arr$0, m)[1 + m]))
              j$0 = m;
             else
              i$0 = m;
            }
           },
         j = i,
         step = 1;
        for(;;){
         if(arr$0.length - 1 <= j){
          var last = arr$0.length - 2 | 0, j_prev = j - (step / 2 | 0) | 0;
          return caml_call1(cond, caml_check_bound(arr$0, last)[1 + last])
                  ? search(j_prev, last)
                  : 0;
         }
         if(caml_call1(cond, caml_check_bound(arr$0, j)[1 + j]))
          return i === j ? t$3 : search(j - (step / 2 | 0) | 0, j);
         var step$0 = step * 2 | 0, j$0 = j + step | 0;
         j = j$0;
         step = step$0;
        }
        break;
       case 1:
        var min_elt$0 = t$3[1];
        if(caml_call1(cond, min_elt$0)) return t$3;
        var automata = t$3[2], t$1 = automata[2], terminals = t$1[4];
        a:
        {
         if(typeof terminals !== "number" && 1 === terminals[0]){var arr = terminals[1], t$4 = [0, 0, arr]; break a;}
         if(typeof terminals === "number")
          var terminals$0 = 0;
         else{
          if(0 !== terminals[0])
           throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
          var terminals$1 = terminals[1], terminals$0 = [0, 0, terminals$1];
         }
         let automata$0 = automata;
         var
          lift =
            function(child){return of_automata([0, automata$0[1], child]);},
          _f_ = caml_call2(Stdlib_Option[3], t$1[5], [0]),
          _g_ = caml_call1(caml_call1(Stdlib_Array[14], lift), _f_),
          children = caml_call1(Stdlib_Array[10], _g_),
          all = insert_sort(terminals$0, children),
          sorted_lst =
            caml_call2
             (Stdlib_List[44],
              function(_h_){return caml_notequal(0, _h_);},
              all);
         if(sorted_lst)
          if(sorted_lst[2])
           var t$4 = [2, min_elt$0, sorted_lst];
          else
           var t = sorted_lst[1], t$4 = t;
         else
          var t$4 = 0;
        }
        t$3 = t$4;
        break;
       default:
        var min_elt$1 = t$3[1];
        if(caml_call1(cond, min_elt$1)) return t$3;
        var
         lst$1 = t$3[2],
         pop_union =
           function(i, param){
            if(! param) return 0;
            var xs = param[2], x = param[1], x$0 = pop_until(cond, x);
            if(x !== x$0) return insert_sort(x$0, pop_union(i + 1 | 0, xs));
            if(0 < i) return [0, x, xs];
            throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
           },
         lst$2 = pop_union(0, lst$1),
         lst = lst$2;
        for(;;){
         if(! lst) return 0;
         var t$0 = lst[1];
         if(! lst[2]) return t$0;
         var lst$0 = lst[2], match = minimum(t$0);
         if(match){var min_elt = match[1]; return [2, min_elt, lst];}
         lst = lst$0;
        }
     }
    }
   }
   function pop_lt(elt, t){
    function cmp_lt(x){return 0 <= caml_call2(Db_Entry[6], x, elt) ? 1 : 0;}
    return pop_until(cmp_lt, t);
   }
   function pop_lte(elt, t){
    function cmp_lte(x){return 0 < caml_call2(Db_Entry[6], x, elt) ? 1 : 0;}
    return pop_until(cmp_lte, t);
   }
   var
    Query_Priority_queue =
      [0,
       minimum,
       of_automata,
       of_sorted_array,
       of_list,
       pop_lt,
       pop_lte,
       size];
   runtime.caml_register_global
    (11, Query_Priority_queue, "Query__Priority_queue");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Query__Succ
//# unitInfo: Requires: Db__Entry, Query__Priority_queue, Stdlib, Stdlib__Int, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_inter_all$1 = "inter all",
    cst_union_all$1 = "union all",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    all = [0, 1, 0],
    empty = [0, 0, 0],
    Query_Priority_queue = global_data.Query__Priority_queue,
    Db_Entry = global_data.Db__Entry,
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_List = global_data.Stdlib__List,
    _a_ = [0, 1],
    cst_inter_all = cst_inter_all$1,
    cst_inter_all$0 = cst_inter_all$1,
    cst_union_all = cst_union_all$1,
    cst_union_all$0 = cst_union_all$1,
    _b_ = [0, "sherlodoc/query/succ.ml", 129, 9];
   function make_pq(t){
    return [0, [0, t], caml_call1(Query_Priority_queue[7], t)];
   }
   function of_automata(t){
    return make_pq(caml_call1(Query_Priority_queue[2], t));
   }
   function of_automatas(ts){
    var _e_ = caml_call2(Stdlib_List[20], Query_Priority_queue[2], ts);
    return make_pq(caml_call1(Query_Priority_queue[4], _e_));
   }
   function of_array(arr){
    return make_pq(caml_call1(Query_Priority_queue[3], arr));
   }
   function inter(a, b){
    var x = a[1], y = b[1];
    a:
    {
     if(typeof x === "number" && ! x) break a;
     if(typeof y !== "number"){
      if(typeof x === "number") return b;
      if(x === y) return a;
      var s = a[2] <= b[2] ? [1, x, y] : [1, y, x];
      return [0, s, caml_call2(Stdlib[16], a[2], b[2])];
     }
     if(y) return a;
    }
    return empty;
   }
   function union(a, b){
    var x = a[1], y = b[1];
    a:
    {
     if(typeof x === "number" && x) break a;
     if(typeof y !== "number"){
      if(typeof x === "number") return b;
      if(x === y) return a;
      var s = b[2] <= a[2] ? [2, x, y] : [2, y, x];
      return [0, s, a[2] + b[2] | 0];
     }
     if(! y) return a;
    }
    return all;
   }
   function join_with(fn, param){
    if(! param) return 0;
    var match = param[2], x = param[1];
    if(! match) return [0, x, 0];
    var xs = match[2], b = match[1], _d_ = join_with(fn, xs);
    return [0, caml_call2(fn, x, b), _d_];
   }
   function perfect(default$0, fn, xs){
    var xs$0 = xs;
    for(;;){
     if(! xs$0) return default$0;
     if(! xs$0[2]){var x = xs$0[1]; return x;}
     var xs$1 = join_with(fn, xs$0);
     xs$0 = xs$1;
    }
   }
   function inter_of_list(xs){
    var
     xs$0 =
       caml_call2
        (Stdlib_List[59],
         function(a, b){return caml_call2(Stdlib_Int[9], a[2], b[2]);},
         xs);
    return perfect(all, inter, xs$0);
   }
   function union_of_list(xs){
    var
     xs$0 =
       caml_call2
        (Stdlib_List[59],
         function(a, b){return caml_call2(Stdlib_Int[9], b[2], a[2]);},
         xs);
    return perfect(empty, union, xs$0);
   }
   function succ(strictness, t){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number")
      return 0 === t$0
              ? 0
              : typeof
                strictness
                === "number"
                ? 1
                : 0 === strictness[0] ? _a_ : 1;
     switch(t$0[0]){
       case 0:
        var pqueue = t$0[1];
        if(typeof strictness === "number")
         var pqueue$0 = pqueue;
        else if(0 === strictness[0])
         var
          elt$0 = strictness[1],
          pqueue$0 = caml_call2(Query_Priority_queue[5], elt$0, pqueue);
        else
         var
          elt$1 = strictness[1],
          pqueue$0 = caml_call2(Query_Priority_queue[6], elt$1, pqueue);
        var match = caml_call1(Query_Priority_queue[1], pqueue$0);
        if(! match) return 0;
        if(typeof strictness !== "number" && 0 === strictness[0]){
         var e$0 = match[1], elt = strictness[1];
         if(caml_call2(Db_Entry[7], e$0, elt)) return [0, [0, pqueue$0]];
        }
        var e = match[1];
        return [1, e, [0, pqueue$0]];
       case 1:
        var r = t$0[2], l = t$0[1], match$0 = succ(strictness, l);
        if(typeof match$0 === "number")
         return 0 === match$0 ? 0 : caml_call1(Stdlib[2], cst_inter_all);
        if(0 !== match$0[0]){
         var l$1 = match$0[2], elt$3 = match$0[1];
         return [1, elt$3, [1, l$1, r]];
        }
        var l$0 = match$0[1], match$1 = succ(strictness, r);
        if(typeof match$1 === "number")
         return 0 === match$1 ? 0 : caml_call1(Stdlib[2], cst_inter_all$0);
        if(0 === match$1[0]){var r$0 = match$1[1]; return [0, [1, l$0, r$0]];}
        var r$1 = match$1[2], elt$2 = match$1[1];
        return [1, elt$2, [1, l$0, r$1]];
       default:
        var r$2 = t$0[2], l$2 = t$0[1], match$2 = succ(strictness, l$2);
        if(typeof match$2 !== "number"){
         if(0 === match$2[0]){
          var l$3 = match$2[1];
          return [0, [2, l$3, r$2]];
         }
         var
          l$4 = match$2[2],
          elt_l = match$2[1],
          match$3 = succ(strictness, r$2);
         if(typeof match$3 === "number")
          return 0 === match$3
                  ? [1, elt_l, l$4]
                  : caml_call1(Stdlib[2], cst_union_all$0);
         if(0 === match$3[0]){
          var r$3 = match$3[1];
          return [0, [2, l$4, r$3]];
         }
         var elt_r = match$3[1], r$4 = match$3[2];
         if(0 >= caml_call2(Db_Entry[6], elt_l, elt_r))
          return [1, elt_l, [2, l$4, r$4]];
         var r$5 = match$3[2];
         return [1, elt_r, [2, l$4, r$5]];
        }
        if(0 !== match$2) return caml_call1(Stdlib[2], cst_union_all);
        t$0 = r$2;
     }
    }
   }
   function succ_loop(opt, strictness, t){
    var opt$0 = opt, strictness$0 = strictness, t$0 = t;
    for(;;){
     var count = opt$0 ? opt$0[1] : 0, match = succ(strictness$0, t$0);
     if(typeof match === "number") return 0 === match ? 0 : 0;
     if(0 === match[0]){
      if(typeof strictness$0 !== "number" && 0 === strictness$0[0]){
       var t$1 = match[1], elt = strictness$0[1];
       return [0, [0, elt, t$1]];
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
     }
     var
      t$2 = match[2],
      elt$0 = match[1],
      strictness$1 = [0, elt$0],
      opt$1 = [0, count + 1 | 0];
     opt$0 = opt$1;
     strictness$0 = strictness$1;
     t$0 = t$2;
    }
   }
   function to_seq(param){
    var t = param[1], state = [0, 0];
    function go(param){
     var _c_ = state[1];
     if(_c_)
      var
       match$0 = _c_[1],
       t$0 = match$0[2],
       previous_elt = match$0[1],
       result = succ_loop(0, [1, previous_elt], t$0);
     else
      var result = succ_loop(0, 0, t);
     if(result){
      var elt = result[1][1];
      state[1] = result;
      var match = [0, elt];
     }
     else
      var match = 0;
     if(! match) return 0;
     var x = match[1];
     return [0, x, go];
    }
    return go;
   }
   var
    Query_Succ =
      [0,
       to_seq,
       empty,
       of_automata,
       of_automatas,
       inter,
       union,
       inter_of_list,
       union_of_list,
       of_array];
   runtime.caml_register_global(14, Query_Succ, "Query__Succ");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Query
//# unitInfo: Requires: Db__Storage, Db__String_automata, Db__Type_polarity, Query__Dynamic_cost, Query__Query_parser, Query__Succ, Query__Top_results, Query__Type_lexer, Query__Type_parser, Stdlib__Lexing, Stdlib__List, Stdlib__Seq, Stdlib__String
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Query_Dynamic_cost = global_data.Query__Dynamic_cost,
    Query_Top_results = global_data.Query__Top_results,
    Query_Query_parser = global_data.Query__Query_parser,
    Query_Succ = global_data.Query__Succ,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    Db_String_automata = global_data.Db__String_automata,
    Db_Storage = global_data.Db__Storage,
    Db_Type_polarity = global_data.Db__Type_polarity,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Query_Type_lexer = global_data.Query__Type_lexer,
    Query_Type_parser = global_data.Query__Type_parser;
   function of_string(str){
    var lexbuf = caml_call2(Stdlib_Lexing[3], 0, str);
    return [0, caml_call2(Query_Type_parser[2], Query_Type_lexer[2], lexbuf)];
   }
   var Type_parser = [0, of_string], Private = [0, Type_parser];
   function find_types(shard, typ){
    var
     _f_ = caml_call2(Db_Type_polarity[2], 0, typ),
     _g_ =
       caml_call2
        (Stdlib_Seq[31],
         function(param){
          var word = param[1];
          return 0 < runtime.caml_ml_string_length(word) ? 1 : 0;
         },
         _f_),
     polarities = caml_call1(Stdlib_List[65], _g_),
     _h_ =
       caml_call2
        (Stdlib_List[20],
         function(param){
          var
           polarity = param[3],
           count = param[2],
           name = param[1],
           st_occ = polarity ? shard[3] : shard[2],
           _i_ =
             caml_call3
              (Db_Storage[1][24],
               function(occurrences, st, acc){
                if(occurrences < count) return acc;
                var ts = caml_call2(Db_String_automata[3], st, name);
                return caml_call2(Stdlib_List[13], ts, acc);
               },
               st_occ,
               0);
          return caml_call1(Query_Succ[4], _i_);
         },
         polarities);
    return caml_call1(Query_Succ[7], _h_);
   }
   function find_names(shard, names){
    var
     names$0 = caml_call2(Stdlib_List[20], Stdlib_String[27], names),
     db_names = shard[1],
     candidates =
       caml_call2
        (Stdlib_List[20],
         function(name){
          var match = caml_call2(Db_String_automata[2], db_names, name);
          if(! match) return Query_Succ[2];
          var trie = match[1];
          return caml_call1(Query_Succ[3], trie);
         },
         names$0);
    return caml_call1(Query_Succ[7], candidates);
   }
   function pretty(params){
    var _e_ = caml_call1(Query_Query_parser[1], params[1]);
    return caml_call1(Query_Query_parser[2], _e_);
   }
   function Make(Io){
    var Tr = caml_call1(Query_Top_results[1], Io);
    function search(shards, opt, params){
     var
      dynamic_sort = opt ? opt[1] : 1,
      limit = params[3],
      query = caml_call1(Query_Query_parser[1], params[1]),
      _b_ =
        caml_call2
         (Stdlib_List[20],
          function(shard){
           var typ = query[2], name = query[1];
           if(! name){
            if(typeof typ === "number") return Query_Succ[2];
            var typ$1 = typ[2];
            return find_types(shard, typ$1);
           }
           if(typeof typ !== "number" && 5795659 === typ[1]){
            var
             typ$0 = typ[2],
             results_name = find_names(shard, name),
             results_typ = find_types(shard, typ$0);
            return caml_call2(Query_Succ[5], results_name, results_typ);
           }
           return find_names(shard, name);
          },
          shards),
      results = caml_call1(Query_Succ[8], _b_),
      results$0 = caml_call1(Query_Succ[1], results),
      packages = params[2],
      results$1 =
        packages
         ? caml_call2
           (Stdlib_Seq[31],
            function(param){
             var pkg = param[7], _d_ = caml_call1(Stdlib_String[9], pkg[1]);
             return caml_call2(Stdlib_List[34], _d_, packages);
            },
            results$0)
         : results$0,
      results$2 = caml_call1(Tr[1][1], results$1);
     if(dynamic_sort){
      var query$0 = caml_call1(Query_Dynamic_cost[1], query);
      return caml_call3(Tr[2], query$0, limit, results$2);
     }
     var _c_ = caml_call2(Tr[1][2], limit, results$2);
     return caml_call1(Tr[1][3], _c_);
    }
    return [0, , search];
   }
   function return$0(x){return x;}
   function map(x, f){return caml_call1(f, x);}
   function bind(x, f){return caml_call1(f, x);}
   var
    Blocking = Make([0, return$0, map, bind]),
    Query =
      [0,
       pretty,
       function(_a_){return [0, Make(_a_)[2]];},
       [0, Blocking[2]],
       Private];
   runtime.caml_register_global(13, Query, "Query");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
