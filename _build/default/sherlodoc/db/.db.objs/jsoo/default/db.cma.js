// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.2

//# unitInfo: Provides: Db__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Db = [0], Db$0 = [0, Db];
   runtime.caml_register_global(0, Db$0, "Db__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Db__Typexpr
//# unitInfo: Requires: Stdlib, Stdlib__Hashtbl
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$11 = "(",
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "_",
    cst$0 = "???",
    cst$1 = " -> ",
    cst$2 = ") ",
    cst$3 = cst$11,
    cst$4 = " ",
    cst$6 = "'_",
    cst$5 = "'",
    cst$7 = ")",
    cst$8 = cst$11,
    cst$9 = ", ",
    cst$10 = " * ",
    Stdlib = global_data.Stdlib,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    cst_show_list_empty = "show_list: empty",
    cst_show_tuple_empty = "show_tuple: empty";
   function tuple(xs){
    if(! xs) return 0;
    if(xs[2]) return [2, xs];
    var x = xs[1];
    return x;
   }
   function show$0(counter, param){
    if(typeof param === "number") return 0 === param ? cst : cst$0;
    switch(param[0]){
      case 0:
       var
        b = param[2],
        a = param[1],
        _i_ = show(b),
        _j_ = caml_call2(Stdlib[28], cst$1, _i_),
        _k_ = show_parens(a);
       return caml_call2(Stdlib[28], _k_, _j_);
      case 1:
       var t = param[1], _l_ = param[2];
       if(! _l_) return t;
       if(_l_[2]){
        var
         xs = param[2],
         _m_ = caml_call2(Stdlib[28], cst$2, t),
         _n_ = show_list(xs),
         _o_ = caml_call2(Stdlib[28], _n_, _m_);
        return caml_call2(Stdlib[28], cst$3, _o_);
       }
       var
        x = _l_[1],
        _p_ = caml_call2(Stdlib[28], cst$4, t),
        _q_ = show_parens(x);
       return caml_call2(Stdlib[28], _q_, _p_);
      case 2:
       var xs$0 = param[1];
       if(counter >= 50)
        return caml_trampoline_return(show_tuple$0, [0, xs$0]);
       var counter$0 = counter + 1 | 0;
       return show_tuple$0(counter$0, xs$0);
      default:
       var name = param[1];
       return name !== "" ? caml_call2(Stdlib[28], cst$5, name) : cst$6;
    }
   }
   function show(param){return caml_trampoline(show$0(0, param));}
   function show_parens$0(counter, t){
    if(typeof t !== "number")
     switch(t[0]){
       case 1:
       case 3: break;
       default:
        var _g_ = show(t), _h_ = caml_call2(Stdlib[28], _g_, cst$7);
        return caml_call2(Stdlib[28], cst$8, _h_);
     }
    if(counter >= 50) return caml_trampoline_return(show$0, [0, t]);
    var counter$0 = counter + 1 | 0;
    return show$0(counter$0, t);
   }
   function show_parens(t){return caml_trampoline(show_parens$0(0, t));}
   function show_list(param){
    if(! param) return caml_call1(Stdlib[2], cst_show_list_empty);
    var x = param[1];
    if(! param[2]) return show(x);
    var
     xs = param[2],
     _d_ = show_list(xs),
     _e_ = caml_call2(Stdlib[28], cst$9, _d_),
     _f_ = show(x);
    return caml_call2(Stdlib[28], _f_, _e_);
   }
   function show_tuple$0(counter, param){
    if(! param) return caml_call1(Stdlib[2], cst_show_tuple_empty);
    var x = param[1];
    if(param[2]){
     var
      xs = param[2],
      _a_ = show_tuple(xs),
      _b_ = caml_call2(Stdlib[28], cst$10, _a_),
      _c_ = show_parens(x);
     return caml_call2(Stdlib[28], _c_, _b_);
    }
    if(counter >= 50) return caml_trampoline_return(show_parens$0, [0, x]);
    var counter$0 = counter + 1 | 0;
    return show_parens$0(counter$0, x);
   }
   function show_tuple(param){return caml_trampoline(show_tuple$0(0, param));}
   function size(typ){return runtime.caml_ml_string_length(show(typ));}
   var
    equal = runtime.caml_equal,
    hash = Stdlib_Hashtbl[28],
    Db_Typexpr = [0, tuple, size, show, equal, hash];
   runtime.caml_register_global(17, Db_Typexpr, "Db__Typexpr");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Db__Type_polarity
//# unitInfo: Requires: Stdlib, Stdlib__Hashtbl, Stdlib__List, Stdlib__Seq, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = " ",
    cst = "-",
    cst$0 = "+",
    poly = "@",
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl;
   function to_string(param){return param ? cst : cst$0;}
   function not(param){return param ? 0 : 1;}
   var Sign = [0, to_string, not];
   function rev_concat(lst){
    return caml_call3
            (Stdlib_List[26],
             function(acc, xs){return caml_call2(Stdlib_List[13], xs, acc);},
             0,
             lst);
   }
   function _a_(any_is_poly, prefix, sgn, param){
    if(typeof param === "number")
     return 0 === param
             ? any_is_poly
               ? [0, [0, sgn, [0, poly, prefix]], 0]
               : [0, [0, sgn, prefix], 0]
             : 0;
    switch(param[0]){
      case 0:
       var
        b = param[2],
        a = param[1],
        _h_ = _a_(any_is_poly, prefix, sgn, b),
        _i_ = _a_(any_is_poly, prefix, caml_call1(Sign[2], sgn), a);
       return caml_call2(Stdlib_List[13], _i_, _h_);
      case 1:
       var
        args = param[2],
        name = param[1],
        prefix$0 = [0, caml_call1(Stdlib_String[27], name), prefix];
       return args
               ? rev_concat
                 (caml_call2
                   (Stdlib_List[21],
                    function(i, arg){
                     var prefix = [0, caml_call1(Stdlib[33], i), prefix$0];
                     return _a_(any_is_poly, prefix, sgn, arg);
                    },
                    args))
               : [0, [0, sgn, prefix$0], 0];
      case 2:
       var args$0 = param[1];
       return rev_concat
               (caml_call1
                 (caml_call1
                   (Stdlib_List[20],
                    function(_j_){return _a_(any_is_poly, prefix, sgn, _j_);}),
                  args$0));
      default: return [0, [0, sgn, [0, poly, prefix]], 0];
    }
   }
   function of_typ(any_is_poly, t){
    var
     _c_ = _a_(any_is_poly, 0, 0, t),
     lst =
       caml_call1
        (caml_call1
          (Stdlib_List[20],
           function(param){
            var
             path = param[2],
             polarity = param[1],
             _g_ = caml_call1(Stdlib_List[10], path);
            return [0, polarity, caml_call2(Stdlib_String[7], cst$1, _g_)];
           }),
         _c_),
     h = caml_call2(Stdlib_Hashtbl[1], 0, 16);
    caml_call2
     (Stdlib_List[18],
      function(v){
       try{var _e_ = caml_call2(Stdlib_Hashtbl[6], h, v), count = _e_;}
       catch(_f_){
        var _d_ = caml_wrap_exception(_f_);
        if(_d_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_d_, 0);
        var count = 0;
       }
       return caml_call3(Stdlib_Hashtbl[11], h, v, count + 1 | 0);
      },
      lst);
    var _b_ = caml_call1(Stdlib_Hashtbl[20], h);
    return caml_call1
            (caml_call1
              (Stdlib_Seq[29],
               function(param){
                var
                 count = param[2],
                 match = param[1],
                 path = match[2],
                 polarity = match[1];
                return [0, path, count, polarity];
               }),
             _b_);
   }
   var Db_Type_polarity = [0, Sign, of_typ, poly];
   runtime.caml_register_global(9, Db_Type_polarity, "Db__Type_polarity");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Db__Entry
//# unitInfo: Requires: Fmt, Stdlib, Stdlib__Format, Stdlib__Int, Stdlib__List, Stdlib__Option, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    cst$3 = "/",
    cst_Stdlib = "Stdlib",
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$2 = cst$3,
    cst$0 = "#",
    hashref = cst$4,
    cst$1 = ".",
    partial = [11, " ; pkg = . }\n", 0],
    cst = cst$3,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Int = global_data.Stdlib__Int,
    Fmt = global_data.Fmt,
    Stdlib_Format = global_data.Stdlib__Format,
    empty_string = caml_call2(Stdlib_String[1], 0, 95);
   function non_empty_string(s){return s == cst$4 ? empty_string : s;}
   var equal = runtime.caml_equal;
   function get_type(t){
    if(typeof t !== "number" && 1 !== t[0]){var typ = t[1]; return [0, typ];}
    return 0;
   }
   var
    Kind = [0, equal, get_type],
    cst_https_ocaml_org_p = "https://ocaml.org/p/",
    _a_ =
      [0,
       [11,
        "{ name = ",
        [2,
         0,
         [11,
          " ; rhs = ",
          [15,
           [11,
            " ; url = ",
            [2,
             0,
             [11,
              " ; kind = . ; cost = ",
              [4, 0, 0, 0, [11, " ; doc_html = ", [2, 0, partial]]]]]]]]]],
       "{ name = %s ; rhs = %a ; url = %s ; kind = . ; cost = %d ; doc_html = %s ; pkg = . }\n"],
    cst_html = ".html",
    cst_https_v2_ocaml_org_release = "https://v2.ocaml.org/releases/5.1/api/",
    cst_doc = "/doc/";
   function v(name, version){
    var _o_ = non_empty_string(version);
    return [0, non_empty_string(name), _o_];
   }
   function link(param){
    var
     version = param[2],
     name = param[1],
     _m_ = caml_call2(Stdlib[28], cst, version),
     _n_ = caml_call2(Stdlib[28], name, _m_);
    return caml_call2(Stdlib[28], cst_https_ocaml_org_p, _n_);
   }
   function pp(fmt, param){
    var
     doc_html = param[6],
     cost = param[5],
     url = param[3],
     rhs = param[2],
     name = param[1],
     _l_ = caml_call2(Fmt[62], 0, Fmt[57]);
    return caml_call8
            (Stdlib_Format[139],
             fmt,
             _a_,
             name,
             _l_,
             rhs,
             url,
             cost,
             doc_html);
   }
   function string_compare_shorter(a, b){
    var
     c =
       caml_call2
        (Stdlib_Int[9], caml_ml_string_length(a), caml_ml_string_length(b));
    return 0 === c ? caml_call2(Stdlib_String[10], a, b) : c;
   }
   function compare(a$0, b$0){
    if(a$0 === b$0) return 0;
    var cmp = caml_call2(Stdlib_Int[9], a$0[5], b$0[5]);
    if(0 !== cmp) return cmp;
    var c$0 = string_compare_shorter(a$0[1], b$0[1]);
    if(0 !== c$0) return c$0;
    var b = b$0[7], a = a$0[7], c = caml_call2(Stdlib_String[10], a[1], b[1]);
    if(0 !== c) return c;
    var c$1 = runtime.caml_compare(a$0[4], b$0[4]);
    if(0 !== c$1) return c$1;
    var c$2 = string_compare_shorter(a$0[6], b$0[6]);
    return 0 === c$2 ? caml_call2(Stdlib_String[10], a$0[3], b$0[3]) : c$2;
   }
   function equal$0(a, b){return 0 === compare(a, b) ? 1 : 0;}
   function link$0(t){
    var fullname = caml_call2(Stdlib_String[17], 46, t[1]);
    if(fullname && fullname[1] === cst_Stdlib){
     var
      name = fullname[2],
      path = caml_call1(Stdlib_List[10], name),
      match = caml_call2(Stdlib_String[37], t[3], 35);
     a:
     {
      if(path && match){
       var
        idx = match[1],
        path$0 = path[2],
        idx$0 = idx + 1 | 0,
        match$0 = caml_call3(Stdlib_String[33], t[3], idx$0, 45);
       if(match$0)
        var
         jdx = match$0[1],
         kind = caml_call3(Stdlib_String[16], t[3], idx$0, jdx - idx$0 | 0),
         jdx$0 = jdx + 1 | 0,
         target =
           caml_call3
            (Stdlib_String[16],
             t[3],
             jdx$0,
             caml_ml_string_length(t[3]) - jdx$0 | 0),
         _e_ = caml_call1(Stdlib_String[26], kind),
         tgt = caml_call2(Stdlib[28], _e_, target);
       else
        var
         tgt =
           caml_call3
            (Stdlib_String[16],
             t[3],
             idx$0,
             caml_ml_string_length(t[3]) - idx$0 | 0);
       var hashref$0 = caml_call2(Stdlib[28], cst$0, tgt), path$1 = path$0;
       break a;
      }
      var hashref$0 = hashref, path$1 = path;
     }
     var
      _f_ = caml_call1(Stdlib_List[10], path$1),
      path$2 = caml_call2(Stdlib_String[7], cst$1, _f_),
      _g_ = caml_call2(Stdlib[28], cst_html, hashref$0),
      _h_ = caml_call2(Stdlib[28], path$2, _g_);
     return caml_call2(Stdlib[28], cst_https_v2_ocaml_org_release, _h_);
    }
    var pkg_link = link(t[7]);
    function align(n, ys){
     if(0 === n) return 0;
     if(! ys) return 0;
     var ys$0 = ys[2], y = ys[1];
     return [0, y, align(n - 1 | 0, ys$0)];
    }
    var
     length = caml_call1(Stdlib_List[1], fullname),
     match$1 = caml_call2(Stdlib_String[37], t[3], 35);
    if(match$1){
     var
      idx$1 = match$1[1],
      tgt$0 =
        caml_call3
         (Stdlib_String[16],
          t[3],
          idx$1,
          caml_ml_string_length(t[3]) - idx$1 | 0),
      count = [0, 0];
     caml_call2
      (Stdlib_String[30],
       function(param){return 46 === param ? (count[1]++, 0) : 0;},
       tgt$0);
     var length$0 = length - count[1] | 0;
    }
    else
     var length$0 = length + 1 | 0;
    var
     _i_ = caml_call2(Stdlib_String[17], 47, t[3]),
     path$3 = align(length$0, caml_call1(Stdlib_List[10], _i_)),
     _j_ = caml_call1(Stdlib_List[10], path$3),
     path$4 = caml_call2(Stdlib_String[7], cst$2, _j_),
     _k_ = caml_call2(Stdlib[28], cst_doc, path$4);
    return caml_call2(Stdlib[28], pkg_link, _k_);
   }
   function v$0(name, kind, cost, rhs, doc_html, url, pkg, param){
    var
     _b_ = non_empty_string(doc_html),
     _c_ = non_empty_string(url),
     _d_ = caml_call2(Stdlib_Option[7], non_empty_string, rhs);
    return [0, non_empty_string(name), _d_, _c_, kind, cost, _b_, pkg];
   }
   var Db_Entry = [0, Kind, [0, v, link], pp, v$0, link$0, compare, equal$0];
   runtime.caml_register_global(19, Db_Entry, "Db__Entry");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Db__String_automata
//# unitInfo: Requires: Db__Type_polarity, Stdlib__Array, Stdlib__Obj, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_sherlodoc_db_string_automa = "sherlodoc/db/string_automata.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Array = global_data.Stdlib__Array,
    Db_Type_polarity = global_data.Db__Type_polarity,
    Stdlib_String = global_data.Stdlib__String,
    Assert_failure = global_data.Assert_failure,
    _a_ = [0, 0, 0, 0, 0, 0],
    _b_ = [0, cst_sherlodoc_db_string_automa, 29, 13],
    _c_ = [0, cst_sherlodoc_db_string_automa, 83, 2],
    _d_ = [0, cst_sherlodoc_db_string_automa, 87, 2];
   function empty(param){return _a_.slice();}
   function size(t){return t[2][3];}
   function minimum(param){
    var t = param[2], match = t[4];
    if(typeof match === "number")
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    var arr = match[1];
    return caml_check_bound(arr, 0)[1];
   }
   function find(t, pattern){
    var child$1 = t[2], j_str = t[1], child$0 = child$1, i$4 = 0;
    for(;;){
     var j_len = child$0[2], j$1 = child$0[1], j_stop = j$1 + j_len | 0;
     a:
     b:
     {
      var i$1 = i$4, j = j$1;
      for(;;){
       if(caml_ml_string_length(pattern) <= i$1) break b;
       if(j_stop <= j) break b;
       var
        j_chr = caml_string_get(j_str, j),
        i_chr = caml_string_get(pattern, i$1);
       if(i_chr !== j_chr) break;
       var j$0 = j + 1 | 0, i$2 = i$1 + 1 | 0;
       i$1 = i$2;
       j = j$0;
      }
      break a;
     }
     var n = i$1 - i$4 | 0;
     if((i$4 + n | 0) === caml_ml_string_length(pattern))
      var
       match$0 =
         [0,
          [0,
           child$0[1] + n | 0,
           child$0[2] - n | 0,
           child$0[3],
           child$0[4],
           child$0[5]]];
     else if(n === child$0[2]){
      var i$5 = i$4 + n | 0;
      if(caml_ml_string_length(pattern) <= i$5)
       var match$0 = [0, child$0];
      else{
       var param = child$0[5], chr = caml_string_get(pattern, i$5);
       a:
       if(param){
        var arr = param[1];
        b:
        {
         var i = 0;
         for(;;){
          if(arr.length - 1 <= i) break b;
          var node = caml_check_bound(arr, i)[1 + i];
          if(chr === caml_string_get(j_str, node[1] - 1 | 0)) break;
          var i$0 = i + 1 | 0;
          i = i$0;
         }
         var match = [0, node];
         break a;
        }
        var match = 0;
       }
       else
        var match = 0;
       if(match){
        var child = match[1], i$3 = i$5 + 1 | 0;
        child$0 = child;
        i$4 = i$3;
        continue;
       }
       var match$0 = 0;
      }
     }
     else
      var match$0 = 0;
     if(! match$0) return 0;
     var child$2 = match$0[1];
     return [0, [0, t[1], child$2]];
    }
   }
   function find_skip(spaces, t, pattern, yield$0){
    function skip(param){
     var node = t[2];
     if(1 <= node[2]){
      var
       _e_ = 32 === caml_string_get(t[1], node[1]) ? 1 : 0,
       spaces$0 = spaces + _e_ | 0;
      if(1 < spaces$0) return 0;
      var node$0 = t[2];
      if(1 <= node$0[2])
       return find_skip
               (spaces$0,
                [0,
                 t[1],
                 [0,
                  node$0[1] + 1 | 0,
                  node$0[2] - 1 | 0,
                  node$0[3],
                  node$0[4],
                  node$0[5]]],
                pattern,
                yield$0);
      throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
     }
     var match = node[5];
     if(! match) return 0;
     var children = match[1];
     return caml_call2
             (Stdlib_Array[12],
              function(child){
               if(0 <= child[2])
                return find_skip
                        (spaces,
                         [0,
                          t[1],
                          [0,
                           child[1] - 1 | 0,
                           child[2] + 1 | 0,
                           child[3],
                           child[4],
                           child[5]]],
                         pattern,
                         yield$0);
               throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
              },
              children);
    }
    if(0 === spaces) return skip(0);
    if(1 === spaces && pattern == Db_Type_polarity[3]){
     var match = find(t, pattern);
     if(! match) return 0;
     var here = match[1];
     return caml_call1(yield$0, here);
    }
    skip(0);
    var match$0 = find(t, pattern);
    if(! match$0) return 0;
    var here$0 = match$0[1];
    return caml_call1(yield$0, here$0);
   }
   function find_star(t$0, pattern){
    var found = [0, 0];
    function go(t, param){
     if(param){
      var ps = param[2], p = param[1];
      return find_skip(0, t, p, function(t){return go(t, ps);});
     }
     found[1] = [0, t, found[1]];
     return 0;
    }
    var match = caml_call2(Stdlib_String[17], 32, pattern);
    if(match){
     var ps = match[2], p = match[1], match$0 = find(t$0, p);
     if(match$0){var t = match$0[1]; go(t, ps);}
    }
    return found[1];
   }
   var Db_String_automata = [0, empty, find, find_star, minimum, size];
   runtime.caml_register_global(8, Db_String_automata, "Db__String_automata");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Db__Storage
//# unitInfo: Requires: Stdlib__Int, Stdlib__Map
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Map = global_data.Stdlib__Map,
    Occurences = caml_call1(Stdlib_Map[1], [0, Stdlib_Int[9]]),
    Db_Storage = [0, Occurences];
   runtime.caml_register_global(2, Db_Storage, "Db__Storage");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Db
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Db = [0];
   runtime.caml_register_global(0, Db, "Db");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
