// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.2

//# unitInfo: Provides: Fmt
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Format, Stdlib__Fun, Stdlib__Hashtbl, Stdlib__Int, Stdlib__Int64, Stdlib__List, Stdlib__Map, Stdlib__Option, Stdlib__Printexc, Stdlib__Queue, Stdlib__Seq, Stdlib__Stack, Stdlib__String, Stdlib__Sys, Stdlib__Uchar
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$20 = "",
    cst_02x = "%02x",
    cst_Ld_s = "%Ld%s",
    cst_Ld_Ld_s = "%Ld.%Ld%s",
    cst_Lda = "%Lda",
    cst_d_s_s = "%d%s%s",
    cst_d_d_s_s = "%d.%d%s%s",
    cst_g = "%g",
    cst_0$0 = "0",
    cst_30$1 = "30",
    cst_31$1 = "31",
    cst_32$1 = "32",
    cst_33$1 = "33",
    cst_34$1 = "34",
    cst_35$1 = "35",
    cst_36$1 = "36",
    cst_37$1 = "37",
    cst$19 = ";",
    cst_1$0 = "<1>",
    cst_2$0 = "<2>",
    cst_v = "<v>",
    cst$18 = "@ ",
    cst$21 = "@,",
    cst_A$0 = "A",
    cst_N$0 = "N",
    cst_None = "None",
    cst_Unknown = "Unknown",
    cst_f$0 = "f",
    cst_h$1 = "h",
    cst_hashtbl = "hashtbl",
    cst_m$0 = "m",
    cst_min$1 = "min",
    cst_ok$0 = "ok",
    cst_queue = "queue",
    cst_s$1 = "s",
    cst_src_fmt_ml = "src/fmt.ml",
    cst_stack = "stack",
    cst_t$0 = "t",
    caml_check_bound = runtime.caml_check_bound,
    caml_div = runtime.caml_div,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_div = runtime.caml_int64_div,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_mod = runtime.caml_mod,
    caml_mul = runtime.caml_mul,
    caml_notequal = runtime.caml_notequal,
    caml_string_get = runtime.caml_string_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   function caml_call11(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    return (f.l >= 0 ? f.l : f.l = f.length) == 11
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst_us = "us",
    cst_ms = "ms",
    cst_s = cst_s$1,
    _ap_ = runtime.caml_int64_create_lo_mi_hi(60, 0, 0),
    cst_s$0 = cst_s$1,
    cst_min = cst_min$1,
    _aq_ = runtime.caml_int64_create_lo_mi_hi(60, 0, 0),
    cst_min$0 = cst_min$1,
    cst_h = cst_h$1,
    _ar_ = runtime.caml_int64_create_lo_mi_hi(24, 0, 0),
    cst_h$0 = cst_h$1,
    cst_d = "d",
    y = runtime.caml_int64_create_lo_mi_hi(366, 0, 0),
    fmt$13 = [0, [12, 58, [17, [0, cst$18, 1, 0], 0]], ":@ "],
    zero = cst_0$0,
    cst$17 = cst$19,
    cst$16 = "\x1b[",
    cst$15 = cst$20,
    fmt$12 = [0, [11, cst_Unknown, 0], cst_Unknown],
    partial = [15, [11, " ?", [17, 0, 0]]],
    cst$14 = "...",
    cst$13 = cst$20,
    cst$12 = ": ",
    fmt$11 = [0, [4, 6, [0, 2, 8], 0, 0], "%08x"],
    kstr$0 = "K",
    i = "i",
    fmt$3 = [0, [12, 59, [17, [0, cst$21, 0, 0], 0]], ";@,"],
    cst$10 = " }",
    cst$11 = "{ ",
    fmt$2 = [0, [11, cst_queue, 0], cst_queue],
    fmt$1 = [0, [11, cst_stack, 0], cst_stack],
    fmt$0 = [0, [11, cst_hashtbl, 0], cst_hashtbl],
    cst$9 = '"',
    cst$7 = "}",
    cst$8 = "{",
    cst$5 = "|]",
    cst$6 = "[|",
    cst$3 = "]",
    cst$4 = "[",
    cst$1 = ")",
    cst$2 = "(",
    cst$0 = cst$19,
    cst = ",",
    us_span = runtime.caml_int64_create_lo_mi_hi(1000, 0, 0),
    ms_span = runtime.caml_int64_create_lo_mi_hi(1000000, 0, 0),
    sec_span = runtime.caml_int64_create_lo_mi_hi(10144256, 59, 0),
    min_span = runtime.caml_int64_create_lo_mi_hi(4675584, 3576, 0),
    hour_span = runtime.caml_int64_create_lo_mi_hi(12099584, 214576, 0),
    day_span = runtime.caml_int64_create_lo_mi_hi(5177344, 5149841, 0),
    year_span = runtime.caml_int64_create_lo_mi_hi(16171008, 1931345, 112),
    fmt$4 = [0, [4, 6, [0, 2, 7], 0, 0], "%07x"],
    fmt$5 = [0, [4, 6, [0, 2, 6], 0, 0], "%06x"],
    fmt$6 = [0, [4, 6, [0, 2, 5], 0, 0], "%05x"],
    fmt$7 = [0, [4, 6, [0, 2, 4], 0, 0], "%04x"],
    fmt$8 = [0, [4, 6, [0, 2, 3], 0, 0], "%03x"],
    fmt$9 = [0, [4, 6, [0, 2, 2], 0, 0], cst_02x],
    fmt$10 = [0, [4, 6, [0, 2, 1], 0, 0], "%01x"],
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Fun = global_data.Stdlib__Fun,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Queue = global_data.Stdlib__Queue,
    Stdlib_Stack = global_data.Stdlib__Stack,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Map = global_data.Stdlib__Map,
    stdout = Stdlib_Format[112],
    stderr = Stdlib_Format[114],
    pf = Stdlib_Format[139],
    pr = Stdlib_Format[140],
    epr = Stdlib_Format[141],
    str = Stdlib_Format[143],
    kpf = Stdlib_Format[146],
    kstr = Stdlib_Format[150],
    _a_ = [0, 1],
    _b_ = [0, 1],
    _d_ = [0, 1],
    _e_ = [0, 1];
   function failwith(fmt){return caml_call2(kstr, Stdlib[2], fmt);}
   function failwith_notrace(fmt){
    return caml_call2(kstr, function(s){throw [0, Stdlib[7], s];}, fmt);
   }
   function invalid_arg(fmt){return caml_call2(kstr, Stdlib[1], fmt);}
   function error(fmt){
    return caml_call2(kstr, function(s){return [1, s];}, fmt);
   }
   function error_msg(fmt){
    return caml_call2(kstr, function(s){return [1, [0, 3854881, s]];}, fmt);
   }
   function flush(ppf, param){return caml_call2(Stdlib_Format[39], ppf, 0);}
   function nop(fmt, ppf){return 0;}
   function any(fmt, ppf, param){return caml_call2(pf, ppf, fmt);}
   function using(f, pp, ppf, v){
    return caml_call2(pp, ppf, caml_call1(f, v));
   }
   function const$0(pp_v, v, ppf, param){return caml_call2(pp_v, ppf, v);}
   function fmt(fmt, ppf){return caml_call2(pf, ppf, fmt);}
   function cut(ppf, param){return caml_call2(Stdlib_Format[30], ppf, 0);}
   function sp(ppf, param){return caml_call2(Stdlib_Format[28], ppf, 0);}
   function sps(n, ppf, param){
    return caml_call3(Stdlib_Format[32], ppf, n, 0);
   }
   function comma(ppf, param){
    caml_call2(Stdlib_Format[13], ppf, cst);
    return sp(ppf, 0);
   }
   function semi(ppf, param){
    caml_call2(Stdlib_Format[13], ppf, cst$0);
    return sp(ppf, 0);
   }
   function iter(opt, iter, pp_elt, ppf, v){
    var pp_sep = opt ? opt[1] : cut, is_first = [0, 1];
    function pp_elt$0(v){
     if(is_first[1]) is_first[1] = 0; else caml_call2(pp_sep, ppf, 0);
     return caml_call2(pp_elt, ppf, v);
    }
    return caml_call2(iter, pp_elt$0, v);
   }
   function iter_bindings(opt, iter, pp_binding, ppf, v){
    var pp_sep = opt ? opt[1] : cut, is_first = [0, 1];
    function pp_binding$0(k, v){
     if(is_first[1]) is_first[1] = 0; else caml_call2(pp_sep, ppf, 0);
     return caml_call2(pp_binding, ppf, [0, k, v]);
    }
    return caml_call2(iter, pp_binding$0, v);
   }
   function append(pp_v0, pp_v1, ppf, v){
    caml_call2(pp_v0, ppf, v);
    return caml_call2(pp_v1, ppf, v);
   }
   function concat(sep, pps, ppf, v){
    return iter
            (sep,
             Stdlib_List[18],
             function(ppf, pp){return caml_call2(pp, ppf, v);},
             ppf,
             pps);
   }
   function box(opt, pp_v, ppf, v){
    var indent = opt ? opt[1] : 0;
    caml_call2(Stdlib_Format[1], ppf, indent);
    caml_call2(pp_v, ppf, v);
    return caml_call2(Stdlib_Format[3], ppf, 0);
   }
   function hbox(pp_v, ppf, v){
    caml_call2(Stdlib_Format[5], ppf, 0);
    caml_call2(pp_v, ppf, v);
    return caml_call2(Stdlib_Format[3], ppf, 0);
   }
   function vbox(opt, pp_v, ppf, v){
    var indent = opt ? opt[1] : 0;
    caml_call2(Stdlib_Format[7], ppf, indent);
    caml_call2(pp_v, ppf, v);
    return caml_call2(Stdlib_Format[3], ppf, 0);
   }
   function hvbox(opt, pp_v, ppf, v){
    var indent = opt ? opt[1] : 0;
    caml_call2(Stdlib_Format[9], ppf, indent);
    caml_call2(pp_v, ppf, v);
    return caml_call2(Stdlib_Format[3], ppf, 0);
   }
   function hovbox(opt, pp_v, ppf, v){
    var indent = opt ? opt[1] : 0;
    caml_call2(Stdlib_Format[11], ppf, indent);
    caml_call2(pp_v, ppf, v);
    return caml_call2(Stdlib_Format[3], ppf, 0);
   }
   function surround(s1, s2, pp_v, ppf, v){
    caml_call2(Stdlib_Format[13], ppf, s1);
    caml_call2(pp_v, ppf, v);
    return caml_call2(Stdlib_Format[13], ppf, s2);
   }
   function parens(pp_v){
    function _dG_(_dJ_, _dK_){
     return surround(cst$2, cst$1, pp_v, _dJ_, _dK_);
    }
    return function(_dH_, _dI_){return box(_a_, _dG_, _dH_, _dI_);};
   }
   function brackets(pp_v){
    function _dB_(_dE_, _dF_){
     return surround(cst$4, cst$3, pp_v, _dE_, _dF_);
    }
    return function(_dC_, _dD_){return box(_b_, _dB_, _dC_, _dD_);};
   }
   function braces(pp_v){
    function _dw_(_dz_, _dA_){
     return surround(cst$8, cst$7, pp_v, _dz_, _dA_);
    }
    return function(_dx_, _dy_){return box(_d_, _dw_, _dx_, _dy_);};
   }
   function quote(opt, pp_v){
    var mark = opt ? opt[1] : cst$9;
    function pp_mark(ppf, param){
     return caml_call3(Stdlib_Format[17], ppf, 1, mark);
    }
    function _do_(_du_, _dv_){return append(pp_mark, pp_v, _du_, _dv_);}
    function _dp_(_ds_, _dt_){return append(_do_, pp_mark, _ds_, _dt_);}
    return function(_dq_, _dr_){return box(_e_, _dp_, _dq_, _dr_);};
   }
   var
    bool = Stdlib_Format[25],
    int$0 = Stdlib_Format[19],
    _f_ = [0, [6, 0, 0, 0, 0], "%nd"],
    _g_ = [0, [5, 0, 0, 0, 0], "%ld"],
    _h_ = [0, [7, 0, 0, 0, 0], "%Ld"],
    _i_ = [0, [4, 12, 0, 0, 0], "%u"],
    _j_ = [0, [5, 12, 0, 0, 0], "%lu"],
    _k_ = [0, [7, 12, 0, 0, 0], "%Lu"],
    _l_ = [0, [6, 12, 0, 0, 0], "%nu"];
   function nativeint(ppf, v){return caml_call3(pf, ppf, _f_, v);}
   function int32(ppf, v){return caml_call3(pf, ppf, _g_, v);}
   function int64(ppf, v){return caml_call3(pf, ppf, _h_, v);}
   function uint(ppf, v){return caml_call3(pf, ppf, _i_, v);}
   function uint32(ppf, v){return caml_call3(pf, ppf, _j_, v);}
   function uint64(ppf, v){return caml_call3(pf, ppf, _k_, v);}
   function unativeint(ppf, v){return caml_call3(pf, ppf, _l_, v);}
   var
    char$0 = Stdlib_Format[23],
    string = Stdlib_Format[13],
    cst_No_backtrace_available = "No backtrace available.",
    _m_ =
      [0,
       [18,
        [1, [0, [11, cst_v, 0], cst_v]],
        [11, "Exception: ", [15, [17, [0, cst$21, 0, 0], [15, [17, 0, 0]]]]]],
       "@[<v>Exception: %a@,%a@]"],
    _n_ = [0, [8, [0, 0, 3], 0, 0, 0], cst_g],
    _o_ = [0, [8, [0, 0, 3], 0, 0, 0], cst_g],
    _p_ = [0, [8, [0, 0, 3], 0, 0, 0], cst_g];
   function buffer(ppf, b){
    return caml_call2(string, ppf, caml_call1(Stdlib_Buffer[2], b));
   }
   function exn(ppf, e){
    return caml_call2(string, ppf, caml_call1(Stdlib_Printexc[1], e));
   }
   function exn_backtrace(ppf, param){
    var bt = param[2], e = param[1];
    function pp_backtrace_str(ppf, s){
     var stop = caml_ml_string_length(s) - 1 | 0;
     if(s == cst$20)
      return caml_call2(string, ppf, cst_No_backtrace_available);
     var left = 0, right = 0;
     for(;;){
      if(right === stop)
       return caml_call2
               (string,
                ppf,
                caml_call3(Stdlib_String[16], s, left, right - left | 0));
      if(10 === caml_string_get(s, right)){
       caml_call2
        (string,
         ppf,
         caml_call3(Stdlib_String[16], s, left, right - left | 0));
       cut(ppf, 0);
       var right$0 = right + 1 | 0, left$0 = right + 1 | 0;
       left = left$0;
       right = right$0;
      }
      else{var right$1 = right + 1 | 0; right = right$1;}
     }
    }
    return caml_call6
            (pf,
             ppf,
             _m_,
             exn,
             e,
             pp_backtrace_str,
             caml_call1(Stdlib_Printexc[14], bt));
   }
   function float$0(ppf, v){return caml_call3(pf, ppf, _n_, v);}
   function round_dfrac(d, x){
    if(x - Math.floor(x + 0.5) == 0.) return x;
    var m = Math.pow(10., d);
    return Math.floor(x * m + 0.5) / m;
   }
   function float_dfrac(d, ppf, f){
    return caml_call3(pf, ppf, _o_, round_dfrac(d, f));
   }
   function float_dsig(d, ppf, f){
    if(f == 0.)
     var _dn_ = 0.;
    else
     var
      m = Math.pow(10., Math.floor(runtime.caml_log10_float(Math.abs(f)))),
      _dn_ = round_dfrac(d, f / m) * m;
    return caml_call3(pf, ppf, _p_, _dn_);
   }
   function pair(opt, pp_fst, pp_snd, ppf, param){
    var pp_sep = opt ? opt[1] : cut, snd = param[2], fst = param[1];
    caml_call2(pp_fst, ppf, fst);
    caml_call2(pp_sep, ppf, 0);
    return caml_call2(pp_snd, ppf, snd);
   }
   function option(opt, pp_v, ppf, param){
    var pp_none = opt ? opt[1] : nop;
    if(! param) return caml_call2(pp_none, ppf, 0);
    var v = param[1];
    return caml_call2(pp_v, ppf, v);
   }
   function result(ok, error, ppf, param){
    if(0 === param[0]){var v = param[1]; return caml_call2(ok, ppf, v);}
    var e = param[1];
    return caml_call2(error, ppf, e);
   }
   function list(sep, pp_elt){
    var _dk_ = Stdlib_List[18];
    return function(_dl_, _dm_){return iter(sep, _dk_, pp_elt, _dl_, _dm_);};
   }
   function array(sep, pp_elt){
    var _dh_ = Stdlib_Array[12];
    return function(_di_, _dj_){return iter(sep, _dh_, pp_elt, _di_, _dj_);};
   }
   function seq(sep, pp_elt){
    var _de_ = Stdlib_Seq[4];
    return function(_df_, _dg_){return iter(sep, _de_, pp_elt, _df_, _dg_);};
   }
   function hashtbl(sep, pp_binding){
    var _db_ = Stdlib_Hashtbl[12];
    return function(_dc_, _dd_){
     return iter_bindings(sep, _db_, pp_binding, _dc_, _dd_);};
   }
   function queue(sep, pp_elt){
    var _c9_ = Stdlib_Queue[15], _c__ = 0;
    return function(_c$_, _da_){return iter(_c__, _c9_, pp_elt, _c$_, _da_);};
   }
   function stack(sep, pp_elt){
    var _c5_ = Stdlib_Stack[13], _c6_ = 0;
    return function(_c7_, _c8_){return iter(_c6_, _c5_, pp_elt, _c7_, _c8_);};
   }
   var
    sig_names =
      [0,
       [0, Stdlib_Sys[16], "SIGABRT"],
       [0,
        [0, Stdlib_Sys[17], "SIGALRM"],
        [0,
         [0, Stdlib_Sys[18], "SIGFPE"],
         [0,
          [0, Stdlib_Sys[19], "SIGHUP"],
          [0,
           [0, Stdlib_Sys[20], "SIGILL"],
           [0,
            [0, Stdlib_Sys[21], "SIGINT"],
            [0,
             [0, Stdlib_Sys[22], "SIGKILL"],
             [0,
              [0, Stdlib_Sys[23], "SIGPIPE"],
              [0,
               [0, Stdlib_Sys[24], "SIGQUIT"],
               [0,
                [0, Stdlib_Sys[25], "SIGSEGV"],
                [0,
                 [0, Stdlib_Sys[26], "SIGTERM"],
                 [0,
                  [0, Stdlib_Sys[27], "SIGUSR1"],
                  [0,
                   [0, Stdlib_Sys[28], "SIGUSR2"],
                   [0,
                    [0, Stdlib_Sys[29], "SIGCHLD"],
                    [0,
                     [0, Stdlib_Sys[30], "SIGCONT"],
                     [0,
                      [0, Stdlib_Sys[31], "SIGSTOP"],
                      [0,
                       [0, Stdlib_Sys[32], "SIGTSTP"],
                       [0,
                        [0, Stdlib_Sys[33], "SIGTTIN"],
                        [0,
                         [0, Stdlib_Sys[34], "SIGTTOU"],
                         [0,
                          [0, Stdlib_Sys[35], "SIGVTALRM"],
                          [0,
                           [0, Stdlib_Sys[36], "SIGPROF"],
                           [0,
                            [0, Stdlib_Sys[37], "SIGBUS"],
                            [0,
                             [0, Stdlib_Sys[38], "SIGPOLL"],
                             [0,
                              [0, Stdlib_Sys[39], "SIGSYS"],
                              [0,
                               [0, Stdlib_Sys[40], "SIGTRAP"],
                               [0,
                                [0, Stdlib_Sys[41], "SIGURG"],
                                [0,
                                 [0, Stdlib_Sys[42], "SIGXCPU"],
                                 [0, [0, Stdlib_Sys[43], "SIGXFSZ"], 0]]]]]]]]]]]]]]]]]]]]]]]]]]]],
    _c_ = [0, 2],
    _q_ = [0, [11, "SIG(", [4, 0, 0, 0, [12, 41, 0]]], "SIG(%d)"],
    _r_ = [0, [11, "U+", [4, 8, [0, 2, 4], 0, 0]], "U+%04X"],
    _s_ = [0, [3, 0, 0], "%S"],
    _t_ =
      [0,
       [18,
        [1, [0, [11, cst_2$0, 0], cst_2$0]],
        [11,
         "Some",
         [17,
          [0, cst$18, 1, 0],
          [18, [1, [0, 0, cst$20]], [15, [17, 0, [17, 0, 0]]]]]]],
       "@[<2>Some@ @[%a@]@]"],
    _u_ = [0, [11, cst_None, 0], cst_None],
    _v_ =
      [0,
       [18,
        [1, [0, [11, cst_2$0, 0], cst_2$0]],
        [11,
         "Ok",
         [17,
          [0, cst$18, 1, 0],
          [18, [1, [0, 0, cst$20]], [15, [17, 0, [17, 0, 0]]]]]]],
       "@[<2>Ok@ @[%a@]@]"],
    _w_ =
      [0,
       [18,
        [1, [0, [11, cst_2$0, 0], cst_2$0]],
        [11,
         "Error",
         [17,
          [0, cst$18, 1, 0],
          [18, [1, [0, 0, cst$20]], [15, [17, 0, [17, 0, 0]]]]]]],
       "@[<2>Error@ @[%a@]@]"],
    _x_ =
      [0,
       [18,
        [1, [0, [11, cst_1$0, 0], cst_1$0]],
        [15, [11, " =", [17, [0, cst$18, 1, 0], [15, [17, 0, 0]]]]]],
       "@[<1>%a =@ %a@]"],
    _y_ = [0, 2];
   function signal(ppf, s){
    var match = caml_call2(Stdlib_List[52], s, sig_names);
    if(! match) return caml_call3(pf, ppf, _q_, s);
    var name = match[1];
    return caml_call2(string, ppf, name);
   }
   function uchar(ppf, u){
    return caml_call3(pf, ppf, _r_, caml_call1(Stdlib_Uchar[10], u));
   }
   function string$0(ppf, s){return caml_call3(pf, ppf, _s_, s);}
   function pair$0(pp_fst, pp_snd){
    var _c2_ = 0, _c3_ = 0;
    function _c4_(ppf, v){return box(_c3_, pp_fst, ppf, v[1]);}
    return parens
            (function(ppf, v){
              append(_c4_, comma, ppf, v);
              return box(_c2_, pp_snd, ppf, v[2]);
             });
   }
   function option$0(pp_v, ppf, param){
    if(! param) return caml_call2(pf, ppf, _u_);
    var v = param[1];
    return caml_call4(pf, ppf, _t_, pp_v, v);
   }
   function result$0(ok, error, ppf, param){
    if(0 === param[0]){
     var v = param[1];
     return caml_call4(pf, ppf, _v_, ok, v);
    }
    var e = param[1];
    return caml_call4(pf, ppf, _w_, error, e);
   }
   function iter$0(iter_f, pp_name, pp_elt){
    var _cX_ = 0;
    function _cY_(_c0_, _c1_){return box(_cX_, pp_elt, _c0_, _c1_);}
    var _cZ_ = [0, sp];
    return parens
            (function(ppf, v){
              append(pp_name, sp, ppf, v);
              return iter(_cZ_, iter_f, _cY_, ppf, v);
             });
   }
   function iter_bindings$0(iter_f, pp_name, pp_k, pp_v){
    var _cV_ = pair$0(pp_k, pp_v), _cW_ = [0, sp];
    return parens
            (function(ppf, v){
              append(pp_name, sp, ppf, v);
              return iter_bindings(_cW_, iter_f, _cV_, ppf, v);
             });
   }
   function list$0(pp_elt){
    var _cS_ = 0;
    return brackets
            (list
              ([0, semi],
               function(_cT_, _cU_){return box(_cS_, pp_elt, _cT_, _cU_);}));
   }
   function array$0(pp_elt){
    var
     _cL_ = 0,
     pp_v =
       array
        ([0, semi],
         function(_cQ_, _cR_){return box(_cL_, pp_elt, _cQ_, _cR_);});
    function _cK_(_cO_, _cP_){
     return surround(cst$6, cst$5, pp_v, _cO_, _cP_);
    }
    return function(_cM_, _cN_){return box(_c_, _cK_, _cM_, _cN_);};
   }
   function seq$0(pp_elt){
    var _cH_ = 0;
    return brackets
            (seq
              ([0, semi],
               function(_cI_, _cJ_){return box(_cH_, pp_elt, _cI_, _cJ_);}));
   }
   function hashtbl$0(pp_k, pp_v){
    return iter_bindings$0
            (Stdlib_Hashtbl[12],
             function(ppf, _cG_){return caml_call2(pf, ppf, fmt$0);},
             pp_k,
             pp_v);
   }
   function stack$0(pp_elt){
    return iter$0
            (Stdlib_Stack[13],
             function(ppf, _cF_){return caml_call2(pf, ppf, fmt$1);},
             pp_elt);
   }
   function queue$0(pp_elt){
    return iter$0
            (Stdlib_Queue[15],
             function(ppf, _cE_){return caml_call2(pf, ppf, fmt$2);},
             pp_elt);
   }
   function field(opt, l, prj, pp_v, ppf, v){
    var label = opt ? opt[1] : string$0;
    return caml_call6(pf, ppf, _x_, label, l, pp_v, caml_call1(prj, v));
   }
   function record(pps){
    var _cq_ = [0, function(ppf, _cD_){return caml_call2(pf, ppf, fmt$3);}];
    function _cr_(_cB_, _cC_){return concat(_cq_, pps, _cB_, _cC_);}
    var _cs_ = 0;
    function _ct_(_cz_, _cA_){return vbox(_cs_, _cr_, _cz_, _cA_);}
    function _cu_(_cx_, _cy_){
     return surround(cst$11, cst$10, _ct_, _cx_, _cy_);
    }
    return function(_cv_, _cw_){return box(_y_, _cu_, _cv_, _cw_);};
   }
   function ipow10(n){
    var acc = 1, n$0 = n;
    for(;;){
     if(0 === n$0) return acc;
     var n$1 = n$0 - 1 | 0, acc$0 = acc * 10 | 0;
     acc = acc$0;
     n$0 = n$1;
    }
   }
   var
    si_symb =
      [0,
        "y",
        "z",
        "a",
        cst_f$0,
        "p",
        "n",
        "u",
        cst_m$0,
        cst$20,
        "k",
        "M",
        "G",
        "T",
        "P",
        "E",
        "Z",
        "Y"].slice
       (),
    si_symb_max = 16,
    _z_ = [0, [4, 0, 0, 0, [2, 0, [2, 0, 0]]], cst_d_s_s],
    _A_ = [0, [4, 0, 0, 0, [2, 0, [2, 0, 0]]], cst_d_s_s],
    _B_ =
      [0,
       [4, 0, 0, 0, [12, 46, [4, 0, 0, 0, [2, 0, [2, 0, 0]]]]],
       cst_d_d_s_s],
    _C_ = [0, [4, 0, 0, 0, [2, 0, [2, 0, 0]]], cst_d_s_s],
    _D_ =
      [0,
       [4, 0, 0, 0, [12, 46, [4, 0, 0, 0, [2, 0, [2, 0, 0]]]]],
       cst_d_d_s_s],
    _E_ =
      [0,
       [4, 0, 0, 0, [12, 46, [4, 0, [0, 2, 2], 0, [2, 0, [2, 0, 0]]]]],
       "%d.%02d%s%s"],
    _F_ =
      [0,
       [11, "~scale is ", [4, 0, 0, 0, [11, ", must be in [-8;8]", 0]]],
       "~scale is %d, must be in [-8;8]"],
    _G_ = [0, [4, 0, 0, 0, [2, 0, [2, 0, 0]]], cst_d_s_s],
    cst_B = "B",
    _H_ = [0, [4, 0, 0, 0, [12, 66, 0]], "%dB"],
    _I_ = [0, [4, 0, 0, 0, [2, 0, [2, 0, [12, 66, 0]]]], "%d%s%sB"],
    _J_ = [0, [15, [2, 0, [2, 0, [12, 66, 0]]]], "%a%s%sB"],
    _K_ = [0, [4, 0, 0, 0, [12, 77, [2, 0, [12, 66, 0]]]], "%dM%sB"],
    _L_ = [0, [15, [12, 77, [2, 0, [12, 66, 0]]]], "%aM%sB"],
    _M_ = [0, [4, 0, 0, 0, [12, 71, [2, 0, [12, 66, 0]]]], "%dG%sB"],
    _N_ = [0, [15, [12, 71, [2, 0, [12, 66, 0]]]], "%aG%sB"],
    _O_ = [0, [4, 0, 0, 0, [12, 84, [2, 0, [12, 66, 0]]]], "%dT%sB"],
    _P_ = [0, [15, [12, 84, [2, 0, [12, 66, 0]]]], "%aT%sB"],
    _Q_ = [0, [4, 0, 0, 0, [12, 80, [2, 0, [12, 66, 0]]]], "%dP%sB"],
    _R_ = [0, [15, [12, 80, [2, 0, [12, 66, 0]]]], "%aP%sB"],
    _S_ = runtime.caml_int64_create_lo_mi_hi(100, 0, 0),
    _T_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _U_ = [0, [7, 0, 0, 0, [2, 0, 0]], cst_Ld_s],
    _V_ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
    _W_ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
    _X_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _Y_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _Z_ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
    ___ = [0, [7, 0, 0, 0, [12, 46, [7, 0, 0, 0, [2, 0, 0]]]], cst_Ld_Ld_s],
    _$_ = [0, [7, 0, 0, 0, [2, 0, 0]], cst_Ld_s],
    _aa_ = runtime.caml_int64_create_lo_mi_hi(100, 0, 0),
    _ab_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _ac_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _ad_ = runtime.caml_int64_create_lo_mi_hi(100, 0, 0),
    _ae_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _af_ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
    _ag_ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
    _ah_ = [0, [7, 0, 0, 0, [12, 46, [7, 0, 0, 0, [2, 0, 0]]]], cst_Ld_Ld_s],
    _ai_ =
      [0,
       [7, 0, 0, 0, [12, 46, [7, 0, [0, 2, 2], 0, [2, 0, 0]]]],
       "%Ld.%02Ld%s"],
    _aj_ = [0, [7, 0, 0, 0, [2, 0, 0]], cst_Ld_s],
    _ak_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _al_ = [0, [7, 0, 0, 0, [2, 0, 0]], cst_Ld_s],
    _am_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _an_ = [0, [7, 0, 0, 0, [2, 0, [7, 0, 0, 0, [2, 0, 0]]]], "%Ld%s%Ld%s"],
    _ao_ = [0, [7, 0, 0, 0, [11, "ns", 0]], "%Ldns"],
    _as_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _at_ = [0, [7, 0, 0, 0, [12, 97, 0]], cst_Lda],
    _au_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _av_ = [0, [7, 0, 0, 0, [12, 97, 0]], cst_Lda],
    _aw_ = [0, [7, 0, 0, 0, [12, 97, [7, 0, 0, 0, [12, 100, 0]]]], "%Lda%Ldd"];
   function si_size(scale, u, ppf, s$2){
    var s$3 = s$2;
    for(;;){
     var _co_ = scale < -8 ? 1 : 0, _cp_ = _co_ || (8 < scale ? 1 : 0);
     if(_cp_) return caml_call1(invalid_arg(_F_), scale);
     if(0 === s$3)
      var pow_div_3 = 0;
     else{
      var p = -1, x = s$3;
      for(;;){
       if(0 === x) break;
       var x$0 = x / 10 | 0, p$0 = p + 1 | 0;
       p = p$0;
       x = x$0;
      }
      var pow_div_3 = p / 3 | 0;
     }
     var symb = (scale + 8 | 0) + pow_div_3 | 0;
     if(16 < symb)
      var factor = ipow10((8 - scale | 0) * 3 | 0), symb$0 = si_symb_max;
     else
      var
       factor$0 = ipow10(pow_div_3 * 3 | 0),
       factor = factor$0,
       symb$0 = symb;
     if(1 === factor)
      return caml_call5
              (pf,
               ppf,
               _G_,
               s$3,
               caml_check_bound(si_symb, symb$0)[1 + symb$0],
               u);
     var
      symb$1 = caml_check_bound(si_symb, symb$0)[1 + symb$0],
      m = caml_div(s$3, factor),
      n = caml_mod(s$3, factor);
     if(100 <= m){
      var m_up = 0 < n ? m + 1 | 0 : m;
      if(1000 > m_up) return caml_call5(pf, ppf, _z_, m_up, symb$1, u);
      var s = caml_mul(m_up, factor);
      s$3 = s;
     }
     else if(10 <= m){
      var
       f_factor = factor / 10 | 0,
       f_m = caml_div(n, f_factor),
       f_n = caml_mod(n, f_factor),
       f_m_up = 0 < f_n ? f_m + 1 | 0 : f_m;
      if(0 === f_m_up) return caml_call5(pf, ppf, _A_, m, symb$1, u);
      if(10 > f_m_up) return caml_call6(pf, ppf, _B_, m, f_m_up, symb$1, u);
      var s$0 = caml_mul(m, factor) + caml_mul(f_m_up, f_factor) | 0;
      s$3 = s$0;
     }
     else{
      var
       f_factor$0 = factor / 100 | 0,
       f_m$0 = caml_div(n, f_factor$0),
       f_n$0 = caml_mod(n, f_factor$0),
       f_m_up$0 = 0 < f_n$0 ? f_m$0 + 1 | 0 : f_m$0;
      if(0 === f_m_up$0) return caml_call5(pf, ppf, _C_, m, symb$1, u);
      if(100 > f_m_up$0)
       return 0 === (f_m_up$0 % 10 | 0)
               ? caml_call6(pf, ppf, _D_, m, f_m_up$0 / 10 | 0, symb$1, u)
               : caml_call6(pf, ppf, _E_, m, f_m_up$0, symb$1, u);
      var s$1 = caml_mul(m, factor) + caml_mul(f_m_up$0, f_factor$0) | 0;
      s$3 = s$1;
     }
    }
   }
   function byte_size(ppf, s){return si_size(0, cst_B, ppf, s);}
   function bi_byte_size(ppf, s){
    var _cl_ = 1;
    function pp_frac(_cm_, _cn_){return float_dfrac(_cl_, _cm_, _cn_);}
    function div_round_up(m, n){return caml_div((m + n | 0) - 1 | 0, n);}
    var k = 1024;
    if(s < 1024) return caml_call3(pf, ppf, _H_, s);
    var m = 1048576;
    if(s < 1048576){
     var sk = s / 1024 | 0;
     return 10 <= sk
             ? caml_call5(pf, ppf, _I_, div_round_up(s, k), kstr$0, i)
             : caml_call6(pf, ppf, _J_, pp_frac, s / 1024, kstr$0, i);
    }
    var g = 1073741824;
    if(s < 1073741824){
     var sm = s / 1048576 | 0;
     return 10 <= sm
             ? caml_call4(pf, ppf, _K_, div_round_up(s, m), i)
             : caml_call5(pf, ppf, _L_, pp_frac, s / 1048576, i);
    }
    var t = 0;
    if(s < 0){
     var sg = s / 1073741824 | 0;
     return 10 <= sg
             ? caml_call4(pf, ppf, _M_, div_round_up(s, g), i)
             : caml_call5(pf, ppf, _N_, pp_frac, s / 1073741824, i);
    }
    var p = 0;
    if(s < 0){
     var st = caml_div(s, 0);
     return 10 <= st
             ? caml_call4(pf, ppf, _O_, div_round_up(s, t), i)
             : caml_call5(pf, ppf, _P_, pp_frac, s / 0, i);
    }
    var sp = caml_div(s, 0);
    return 10 <= sp
            ? caml_call4(pf, ppf, _Q_, div_round_up(s, p), i)
            : caml_call5(pf, ppf, _R_, pp_frac, s / 0, i);
   }
   function unsigned_compare(x0, x1){
    return caml_call2
            (Stdlib_Int64[15],
             caml_int64_sub(x0, Stdlib_Int64[10]),
             caml_int64_sub(x1, Stdlib_Int64[10]));
   }
   function unsigned_div(n, d){
    if(runtime.caml_lessthan(d, Stdlib_Int64[1]))
     return 0 <= unsigned_compare(n, d) ? Stdlib_Int64[2] : Stdlib_Int64[1];
    var
     q =
       runtime.caml_int64_shift_left
        (caml_int64_div(runtime.caml_int64_shift_right_unsigned(n, 1), d), 1),
     r = caml_int64_sub(n, caml_int64_mul(q, d));
    return 0 <= unsigned_compare(r, d) ? caml_call1(Stdlib_Int64[6], q) : q;
   }
   function unsigned_rem(n, d){
    return caml_int64_sub
            (n, caml_int64_mul(caml_call2(Stdlib_Int64[4], n, d), d));
   }
   function pp_si_span(counter, unit_str, si_unit, si_higher_unit, ppf, span){
    function geq(x, y){return 0 <= unsigned_compare(x, y) ? 1 : 0;}
    var m = unsigned_div(span, si_unit), n = unsigned_rem(span, si_unit);
    if(geq(m, _S_)){
     var
      m_up =
        caml_call2(Stdlib_Int64[17], n, _T_)
         ? m
         : caml_call1(Stdlib_Int64[6], m),
      span$0 = caml_int64_mul(m_up, si_unit);
     if(! geq(span$0, si_higher_unit))
      return caml_call4(pf, ppf, _U_, m_up, unit_str);
     if(counter >= 50)
      return caml_trampoline_return(uint64_ns_span$0, [0, ppf, span$0]);
     var counter$0 = counter + 1 | 0;
     return uint64_ns_span$0(counter$0, ppf, span$0);
    }
    if(geq(m, _V_)){
     var
      f_factor = unsigned_div(si_unit, _W_),
      f_m = unsigned_div(n, f_factor),
      f_n = unsigned_rem(n, f_factor),
      f_m_up =
        caml_call2(Stdlib_Int64[17], f_n, _X_)
         ? f_m
         : caml_call1(Stdlib_Int64[6], f_m);
     if(! caml_notequal(f_m_up, _Y_))
      return caml_call4(pf, ppf, _$_, m, unit_str);
     if(! geq(f_m_up, _Z_))
      return caml_call5(pf, ppf, ___, m, f_m_up, unit_str);
     var
      _cj_ =
        caml_int64_add
         (caml_int64_mul(m, si_unit), caml_int64_mul(f_m_up, f_factor));
     if(counter >= 50)
      return caml_trampoline_return(uint64_ns_span$0, [0, ppf, _cj_]);
     var counter$1 = counter + 1 | 0;
     return uint64_ns_span$0(counter$1, ppf, _cj_);
    }
    var
     f_factor$0 = unsigned_div(si_unit, _aa_),
     f_m$0 = unsigned_div(n, f_factor$0),
     f_n$0 = unsigned_rem(n, f_factor$0),
     f_m_up$0 =
       caml_call2(Stdlib_Int64[17], f_n$0, _ab_)
        ? f_m$0
        : caml_call1(Stdlib_Int64[6], f_m$0);
    if(! caml_notequal(f_m_up$0, _ac_))
     return caml_call4(pf, ppf, _aj_, m, unit_str);
    if(! geq(f_m_up$0, _ad_))
     return caml_call2
              (Stdlib_Int64[17], runtime.caml_int64_mod(f_m_up$0, _af_), _ae_)
             ? caml_call5
               (pf, ppf, _ah_, m, caml_int64_div(f_m_up$0, _ag_), unit_str)
             : caml_call5(pf, ppf, _ai_, m, f_m_up$0, unit_str);
    var
     _ck_ =
       caml_int64_add
        (caml_int64_mul(m, si_unit), caml_int64_mul(f_m_up$0, f_factor$0));
    if(counter >= 50)
     return caml_trampoline_return(uint64_ns_span$0, [0, ppf, _ck_]);
    var counter$2 = counter + 1 | 0;
    return uint64_ns_span$0(counter$2, ppf, _ck_);
   }
   function pp_non_si
   (counter, unit_str, unit, unit_lo_str, unit_lo, unit_lo_size, ppf, span){
    var m = unsigned_div(span, unit), n = unsigned_rem(span, unit);
    if(caml_call2(Stdlib_Int64[17], n, _ak_))
     return caml_call4(pf, ppf, _al_, m, unit_str);
    var
     f_m = unsigned_div(n, unit_lo),
     f_n = unsigned_rem(n, unit_lo),
     f_m_up =
       caml_call2(Stdlib_Int64[17], f_n, _am_)
        ? f_m
        : caml_call1(Stdlib_Int64[6], f_m);
    if(0 > unsigned_compare(f_m_up, unit_lo_size))
     return caml_call6(pf, ppf, _an_, m, unit_str, f_m_up, unit_lo_str);
    var
     _ci_ =
       caml_int64_add
        (caml_int64_mul(m, unit), caml_int64_mul(f_m_up, unit_lo));
    if(counter >= 50)
     return caml_trampoline_return(uint64_ns_span$0, [0, ppf, _ci_]);
    var counter$0 = counter + 1 | 0;
    return uint64_ns_span$0(counter$0, ppf, _ci_);
   }
   function uint64_ns_span$0(counter, ppf, span){
    function lt(x, y){return -1 === unsigned_compare(x, y) ? 1 : 0;}
    if(lt(span, us_span)) return caml_call3(pf, ppf, _ao_, span);
    if(lt(span, ms_span)){
     if(counter >= 50)
      return caml_trampoline_return
              (pp_si_span, [0, cst_us, us_span, ms_span, ppf, span]);
     var counter$3 = counter + 1 | 0;
     return pp_si_span(counter$3, cst_us, us_span, ms_span, ppf, span);
    }
    if(lt(span, sec_span)){
     if(counter >= 50)
      return caml_trampoline_return
              (pp_si_span, [0, cst_ms, ms_span, sec_span, ppf, span]);
     var counter$4 = counter + 1 | 0;
     return pp_si_span(counter$4, cst_ms, ms_span, sec_span, ppf, span);
    }
    if(lt(span, min_span)){
     if(counter >= 50)
      return caml_trampoline_return
              (pp_si_span, [0, cst_s, sec_span, min_span, ppf, span]);
     var counter$5 = counter + 1 | 0;
     return pp_si_span(counter$5, cst_s, sec_span, min_span, ppf, span);
    }
    if(lt(span, hour_span)){
     if(counter >= 50)
      return caml_trampoline_return
              (pp_non_si,
               [0, cst_min, min_span, cst_s$0, sec_span, _ap_, ppf, span]);
     var counter$0 = counter + 1 | 0;
     return pp_non_si
             (counter$0,
              cst_min,
              min_span,
              cst_s$0,
              sec_span,
              _ap_,
              ppf,
              span);
    }
    if(lt(span, day_span)){
     if(counter >= 50)
      return caml_trampoline_return
              (pp_non_si,
               [0, cst_h, hour_span, cst_min$0, min_span, _aq_, ppf, span]);
     var counter$1 = counter + 1 | 0;
     return pp_non_si
             (counter$1,
              cst_h,
              hour_span,
              cst_min$0,
              min_span,
              _aq_,
              ppf,
              span);
    }
    if(lt(span, year_span)){
     if(counter >= 50)
      return caml_trampoline_return
              (pp_non_si,
               [0, cst_d, day_span, cst_h$0, hour_span, _ar_, ppf, span]);
     var counter$2 = counter + 1 | 0;
     return pp_non_si
             (counter$2, cst_d, day_span, cst_h$0, hour_span, _ar_, ppf, span);
    }
    var m = unsigned_div(span, year_span), n = unsigned_rem(span, year_span);
    if(caml_call2(Stdlib_Int64[17], n, _as_))
     return caml_call3(pf, ppf, _at_, m);
    var
     f_m = unsigned_div(n, day_span),
     f_n = unsigned_rem(n, day_span),
     f_m_up =
       caml_call2(Stdlib_Int64[17], f_n, _au_)
        ? f_m
        : caml_call1(Stdlib_Int64[6], f_m);
    return 0 <= unsigned_compare(f_m_up, y)
            ? caml_call3(pf, ppf, _av_, caml_call1(Stdlib_Int64[6], m))
            : caml_call4(pf, ppf, _aw_, m, f_m_up);
   }
   function uint64_ns_span(ppf, span){
    return caml_trampoline(uint64_ns_span$0(0, ppf, span));
   }
   function iter_vec(f, param){
    var get = param[2], n = param[1], _cg_ = n - 1 | 0, _cf_ = 0;
    if(_cg_ >= 0){
     var i = _cf_;
     for(;;){
      caml_call2(f, i, caml_call1(get, i));
      var _ch_ = i + 1 | 0;
      if(_cg_ === i) break;
      i = _ch_;
     }
    }
    return 0;
   }
   function vec(sep){
    return function(_cc_, _cd_, _ce_){
     return iter_bindings(sep, iter_vec, _cc_, _cd_, _ce_);};
   }
   function _ax_(s){
    return [0,
            caml_ml_string_length(s),
            function(_cb_){return caml_string_get(s, _cb_);}];
   }
   function on_string(_b__, _b$_, _ca_){return using(_ax_, _b__, _b$_, _ca_);}
   function _ay_(b){
    return [0,
            runtime.caml_ml_bytes_length(b),
            function(_b9_){return runtime.caml_bytes_get(b, _b9_);}];
   }
   function on_bytes(_b6_, _b7_, _b8_){return using(_ay_, _b6_, _b7_, _b8_);}
   var
    prefix0x =
      [0,
       [0, 15, function(ppf){return caml_call2(pf, ppf, fmt$10);}],
       [0,
        [0, 255, function(ppf){return caml_call2(pf, ppf, fmt$9);}],
        [0,
         [0, 4095, function(ppf){return caml_call2(pf, ppf, fmt$8);}],
         [0,
          [0, 65535, function(ppf){return caml_call2(pf, ppf, fmt$7);}],
          [0,
           [0, 1048575, function(ppf){return caml_call2(pf, ppf, fmt$6);}],
           [0,
            [0, 16777215, function(ppf){return caml_call2(pf, ppf, fmt$5);}],
            [0,
             [0, 268435455, function(ppf){return caml_call2(pf, ppf, fmt$4);}],
             0]]]]]]],
    _az_ = [0, [4, 6, [0, 2, 2], 0, 0], cst_02x],
    _aA_ = [0, cst_src_fmt_ml, 549, 13],
    _aB_ = [0, [4, 0, 0, 0, [12, 46, [4, 0, 0, 0, 0]]], "%d.%d"],
    _aC_ =
      [0,
       [4,
        0,
        0,
        0,
        [12,
         46,
         [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [12, 46, [4, 0, 0, 0, 0]]]]]]],
       "%d.%d-%d.%d"],
    _aD_ = [0, [15, [12, 44, [17, [0, cst$18, 1, 0], 0]]], "%a,@ "],
    _aE_ = [0, [11, "or", [17, [0, cst$18, 1, 0], [15, 0]]], "or@ %a"],
    _aF_ = [0, cst_src_fmt_ml, 587, 12],
    _aG_ =
      [0,
       [18,
        [1, [0, 0, cst$20]],
        [11,
         "one",
         [17,
          [0, cst$18, 1, 0],
          [11, "of", [17, [0, cst$18, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[one@ of@ %a@]"],
    _aH_ =
      [0,
       [18,
        [1, [0, 0, cst$20]],
        [11,
         "either ",
         [15, [11, " or", [17, [0, cst$18, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[either %a or@ %a@]"],
    _aI_ =
      [0,
       [18,
        [1, [0, 0, cst$20]],
        [15,
         [12,
          32,
          [2,
           0,
           [12,
            32,
            [15,
             [15,
              [12,
               46,
               [17, [0, cst$18, 1, 0], [11, "Did you mean ", partial]]]]]]]]]],
       "@[%a %s %a%a.@ Did you mean %a ?@]"],
    _aJ_ =
      [0,
       [18,
        [1, [0, 0, cst$20]],
        [15, [12, 32, [2, 0, [12, 32, [15, [15, [12, 46, [17, 0, 0]]]]]]]]],
       "@[%a %s %a%a.@]"];
   function ascii(_b3_, opt, param, ppf, v){
    var w = _b3_ ? _b3_[1] : 0;
    if(opt)
     var subst = opt[1];
    else
     var
      v$0 = 46,
      subst = function(ppf, _b5_){return caml_call2(char$0, ppf, v$0);};
    var n = v[1];
    function pp_char(ppf, param){
     var c = param[2];
     if(32 <= c && 127 > c) return caml_call2(char$0, ppf, c);
     return caml_call2(subst, ppf, 0);
    }
    vec(0)(pp_char, ppf, v);
    var _b4_ = n < w ? 1 : 0;
    return _b4_ ? sps(w - n | 0, ppf, 0) : _b4_;
   }
   function octets(_bY_, opt, param, ppf, v){
    var w = _bY_ ? _bY_[1] : 0, sep = opt ? opt[1] : sp, n = v[1];
    function pp_sep(ppf, i){
     var _b1_ = 0 < i ? 1 : 0, _b2_ = _b1_ ? 0 === (i % 2 | 0) ? 1 : 0 : _b1_;
     return _b2_ ? caml_call2(sep, ppf, 0) : _b2_;
    }
    function pp_char(ppf, param){
     var c = param[2], i = param[1];
     pp_sep(ppf, i);
     return caml_call3(pf, ppf, _az_, c);
    }
    vec([0, nop])(pp_char, ppf, v);
    var _bZ_ = w - 1 | 0;
    if(_bZ_ >= n){
     var i = n;
     for(;;){
      pp_sep(ppf, i);
      sps(2, ppf, 0);
      var _b0_ = i + 1 | 0;
      if(_bZ_ === i) break;
      i = _b0_;
     }
    }
    return 0;
   }
   function addresses(addr, opt, pp_vec, ppf, v){
    var w = opt ? opt[1] : 16, n$0 = v[1];
    if(addr)
     var pp$0 = addr[1], addr$0 = pp$0;
    else{
     var
      max = caml_mul(caml_div(n$0 - 1 | 0, w), w),
      match =
        caml_call2
         (Stdlib_List[40],
          function(param){var x = param[1]; return max <= x ? 1 : 0;},
          prefix0x);
     if(match)
      var pp = match[1][2], pp_v0 = pp;
     else
      var pp_v0 = function(ppf){return caml_call2(pf, ppf, fmt$11);};
     var
      addr$0 =
        function(ppf, v){
         caml_call2(pp_v0, ppf, v);
         return caml_call2(string, ppf, cst$12);
        };
    }
    function pp_sub(ppf, param){
     var sub = param[2], i = param[1];
     caml_call2(addr$0, ppf, caml_mul(i, w));
     return box(0, pp_vec, ppf, sub);
    }
    var
     get = v[2],
     n = v[1],
     _bS_ =
       [0,
        caml_div(n - 1 | 0, w) + 1 | 0,
        function(j){
         var off = caml_mul(w, j);
         return [0,
                 caml_call2(Stdlib[16], w, n - off | 0),
                 function(i){return caml_call1(get, i + off | 0);}];
        }],
     _bT_ = vec(0);
    return vbox
            (0,
             function(_bU_, _bV_){
              var _bX_ = _bV_, _bW_ = _bU_;
              return _bT_(pp_sub, _bW_, _bX_);
             },
             ppf,
             _bS_);
   }
   function hex(opt, param){
    var
     w = opt ? opt[1] : 16,
     _by_ = 0,
     _bz_ = 0,
     _bA_ = [0, w],
     _bE_ = 0,
     _bF_ = 0,
     _bG_ = [0, w];
    function _bB_(_bQ_, _bR_){return ascii(_bA_, _bz_, _by_, _bQ_, _bR_);}
    var _bC_ = 0, _bD_ = 2;
    function _bH_(_bO_, _bP_){return octets(_bG_, _bF_, _bE_, _bO_, _bP_);}
    var _bI_ = 0;
    function _bJ_(ppf, v){
     box(_bI_, _bH_, ppf, v);
     sps(_bD_, ppf, v);
     return box(_bC_, _bB_, ppf, v);
    }
    var _bK_ = [0, w], _bL_ = 0;
    return function(_bM_, _bN_){
     return addresses(_bL_, _bK_, _bJ_, _bM_, _bN_);};
   }
   function is_nl(c){return 10 === c ? 1 : 0;}
   function is_nl_or_sp(c){
    var _bx_ = 10 === c ? 1 : 0, _bw_ = _bx_ || (32 === c ? 1 : 0);
    return _bw_;
   }
   function is_white(param){
    a:
    {
     if(14 <= param){if(32 === param) break a;} else if(9 <= param) break a;
     return 0;
    }
    return 1;
   }
   function not_white(c){return 1 - is_white(c);}
   function not_white_or_nl(c){
    var _bv_ = 10 === c ? 1 : 0;
    return _bv_ ? _bv_ : not_white(c);
   }
   function stop_at(sat, start, max, s){
    var start$0 = start;
    for(;;){
     if(max < start$0) return start$0;
     if(caml_call1(sat, caml_string_get(s, start$0))) return start$0;
     var start$1 = start$0 + 1 | 0;
     start$0 = start$1;
    }
   }
   function sub(s, start, stop, max){
    if(start === stop) return cst$13;
    if(0 === start && max < stop) return s;
    return caml_call3(Stdlib_String[16], s, start, stop - start | 0);
   }
   function words(ppf, s){
    var
     max = caml_ml_string_length(s) - 1 | 0,
     start$1 = stop_at(not_white, 0, max, s);
    if(max < start$1) return 0;
    var start = start$1;
    for(;;){
     var stop = stop_at(is_white, start, max, s);
     if(max < stop){
      var _bt_ = sub(s, start, stop, max);
      return caml_call2(Stdlib_Format[13], ppf, _bt_);
     }
     var _bu_ = sub(s, start, stop, max);
     caml_call2(Stdlib_Format[13], ppf, _bu_);
     var start$0 = stop_at(not_white, stop, max, s);
     if(max < start$0) return 0;
     caml_call2(Stdlib_Format[28], ppf, 0);
     start = start$0;
    }
   }
   function paragraphs(ppf, s){
    var
     max = caml_ml_string_length(s) - 1 | 0,
     start$3 = stop_at(not_white, 0, max, s);
    if(max < start$3) return 0;
    var start = start$3;
    for(;;){
     var stop = stop_at(is_white, start, max, s);
     if(max < stop){
      var _br_ = sub(s, start, stop, max);
      return caml_call2(Stdlib_Format[13], ppf, _br_);
     }
     var _bs_ = sub(s, start, stop, max);
     caml_call2(Stdlib_Format[13], ppf, _bs_);
     var start$0 = stop_at(not_white_or_nl, stop, max, s);
     if(max < start$0) return 0;
     if(10 === caml_string_get(s, start$0)){
      var start$1 = stop_at(not_white_or_nl, start$0 + 1 | 0, max, s);
      if(max < start$1) return 0;
      if(10 === caml_string_get(s, start$1)){
       var start$2 = stop_at(not_white, start$1 + 1 | 0, max, s);
       if(max < start$2) return 0;
       caml_call2(Stdlib_Format[35], ppf, 0);
       caml_call2(Stdlib_Format[35], ppf, 0);
       start = start$2;
      }
      else{caml_call2(Stdlib_Format[28], ppf, 0); start = start$1;}
     }
     else{caml_call2(Stdlib_Format[28], ppf, 0); start = start$0;}
    }
   }
   function text(ppf, s){
    var max = caml_ml_string_length(s) - 1 | 0, start = 0;
    for(;;){
     var stop = stop_at(is_nl_or_sp, start, max, s);
     if(max < stop){
      var _bp_ = sub(s, start, stop, max);
      return caml_call2(Stdlib_Format[13], ppf, _bp_);
     }
     var _bq_ = sub(s, start, stop, max);
     caml_call2(Stdlib_Format[13], ppf, _bq_);
     var match = caml_string_get(s, stop);
     if(10 === match)
      caml_call2(Stdlib_Format[35], ppf, 0);
     else{
      if(32 !== match)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _aA_], 1);
      caml_call2(Stdlib_Format[28], ppf, 0);
     }
     var start$0 = stop + 1 | 0;
     start = start$0;
    }
   }
   function lines(ppf, s){
    var max = caml_ml_string_length(s) - 1 | 0, start = 0;
    for(;;){
     var stop = stop_at(is_nl, start, max, s);
     if(max < stop){
      var _bn_ = sub(s, start, stop, max);
      return caml_call2(Stdlib_Format[13], ppf, _bn_);
     }
     var _bo_ = sub(s, start, stop, max);
     caml_call2(Stdlib_Format[13], ppf, _bo_);
     caml_call2(Stdlib_Format[35], ppf, 0);
     var start$0 = stop + 1 | 0;
     start = start$0;
    }
   }
   function truncated(max, ppf, s){
    if(caml_ml_string_length(s) <= max)
     return caml_call2(Stdlib_Format[13], ppf, s);
    var _bk_ = max - 4 | 0, _bj_ = 0;
    if(_bk_ >= 0){
     var i = _bj_;
     for(;;){
      var _bl_ = caml_string_get(s, i);
      caml_call2(Stdlib_Format[23], ppf, _bl_);
      var _bm_ = i + 1 | 0;
      if(_bk_ === i) break;
      i = _bm_;
     }
    }
    return caml_call2(Stdlib_Format[13], ppf, cst$14);
   }
   function text_loc(ppf, param){
    var
     _bi_ = param[2],
     c1 = _bi_[2],
     l1 = _bi_[1],
     match = param[1],
     c0 = match[2],
     l0 = match[1];
    if(l0 === l1 && c0 === c1) return caml_call4(pf, ppf, _aB_, l0, c0);
    return caml_call6(pf, ppf, _aC_, l0, c0, l1, c1);
   }
   function one_of(opt, pp_v, ppf, vs){
    var empty = opt ? opt[1] : nop;
    if(! vs) return caml_call2(empty, ppf, 0);
    var v = vs[1], _bh_ = vs[2];
    if(! _bh_) return caml_call2(pp_v, ppf, v);
    if(_bh_[2]){
     var
      loop =
        function(ppf, param){
         var param$0 = param;
         for(;;){
          if(! param$0)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _aF_], 1);
          var v = param$0[1];
          if(! param$0[2]) return caml_call4(pf, ppf, _aE_, pp_v, v);
          var vs = param$0[2];
          caml_call4(pf, ppf, _aD_, pp_v, v);
          param$0 = vs;
         }
        };
     return caml_call4(pf, ppf, _aG_, loop, vs);
    }
    var v1 = _bh_[1];
    return caml_call6(pf, ppf, _aH_, pp_v, v, pp_v, v1);
   }
   function did_you_mean(_bc_, opt, kind, pp_v, ppf, param){
    var
     pre =
       _bc_
        ? _bc_[1]
        : function(ppf, _bg_){return caml_call2(pf, ppf, fmt$12);},
     post = opt ? opt[1] : nop,
     hints = param[2],
     v = param[1];
    if(! hints)
     return caml_call9(pf, ppf, _aJ_, pre, 0, kind, pp_v, v, post, 0);
    var _bd_ = 0;
    return caml_call11
            (pf,
             ppf,
             _aI_,
             pre,
             0,
             kind,
             pp_v,
             v,
             post,
             0,
             function(_be_, _bf_){return one_of(_bd_, pp_v, _be_, _bf_);},
             hints);
   }
   var Imap = caml_call1(Stdlib_Map[1], [0, Stdlib_Int[9]]), id = [0, 0];
   function attr(enc, dec){id[1]++; return [0, id[1], enc, dec];}
   var
    Fmt_store_get = [248, "Fmt.Fmt_store_get", caml_fresh_oo_id(0)],
    Fmt_store_set = [248, "Fmt.Fmt_store_set", caml_fresh_oo_id(0)],
    cst_ok = cst_ok$0,
    cst_t = cst_t$0,
    cst_f = cst_f$0,
    _aK_ = [0, cst_src_fmt_ml, 638, 55];
   function store_op(op, ppf){
    var funs = caml_call2(Stdlib_Format[108], ppf, 0);
    return caml_call1(funs[1], op);
   }
   function get(attr, ppf){
    var dec = attr[3], s = store_op([0, Fmt_store_get, attr], ppf);
    return s !== cst$20 ? [0, caml_call1(dec, s)] : 0;
   }
   function set(attr, v, ppf){
    for(;;){
     if(store_op([0, Fmt_store_set, attr, v], ppf) === cst_ok$0) return 0;
     var
      funs = caml_call2(Stdlib_Format[108], ppf, 0),
      other = funs[1],
      s = [0, Imap[1]];
     let s$0 = s, other$0 = other;
     var
      mark_open_stag =
        function(stag){
         if(stag[1] === Fmt_store_get){
          var id = stag[2][1], _a$_ = caml_call2(Imap[18], id, s$0[1]);
          return caml_call2(Stdlib_Option[3], _a$_, cst$15);
         }
         if(stag[1] !== Fmt_store_set) return caml_call1(other$0, stag);
         var
          v = stag[3],
          match = stag[2],
          enc = match[2],
          id$0 = match[1],
          _ba_ = s$0[1],
          _bb_ = caml_call1(enc, v);
         s$0[1] = caml_call3(Imap[2], id$0, _bb_, _ba_);
         return cst_ok;
        };
     caml_call2
      (Stdlib_Format[106],
       ppf,
       [0, mark_open_stag, funs[2], funs[3], funs[4]]);
    }
   }
   function def(x, param){if(! param) return x; var y = param[1]; return y;}
   function enc(param){return param ? cst_t : cst_f;}
   function dec(param){
    if(param === cst_f$0) return 0;
    if(param !== cst_t$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aK_], 1);
    return 1;
   }
   var
    utf_8_attr = attr(enc, dec),
    cst_N = cst_N$0,
    cst_A = cst_A$0,
    _aL_ = [0, cst_src_fmt_ml, 647, 60];
   function utf_8(ppf){return def(1, get(utf_8_attr, ppf));}
   function set_utf_8(ppf, x){return set(utf_8_attr, x, ppf);}
   function enc$0(param){return 870530776 <= param ? cst_N : cst_A;}
   function dec$0(param){
    if(param === cst_A$0) return 323557469;
    if(param !== cst_N$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aL_], 1);
    return 870530776;
   }
   var style_renderer_attr = attr(enc$0, dec$0), cst_m = cst_m$0;
   function style_renderer(ppf){
    return def(870530776, get(style_renderer_attr, ppf));
   }
   function set_style_renderer(ppf, x){
    return set(style_renderer_attr, x, ppf);
   }
   function with_buffer(like, buf){
    var ppf = caml_call1(Stdlib_Format[116], buf);
    if(! like) return ppf;
    var like$0 = like[1], funs = caml_call2(Stdlib_Format[108], like$0, 0);
    caml_call2(Stdlib_Format[106], ppf, funs);
    return ppf;
   }
   function str_like(ppf, fmt){
    var
     buf = caml_call1(Stdlib_Buffer[1], 64),
     bppf = with_buffer([0, ppf], buf);
    function flush(ppf){
     caml_call2(Stdlib_Format[39], ppf, 0);
     var s = caml_call1(Stdlib_Buffer[2], buf);
     caml_call1(Stdlib_Buffer[9], buf);
     return s;
    }
    return caml_call3(Stdlib_Format[146], flush, bppf, fmt);
   }
   function if_utf_8(pp_u, pp){
    return function(ppf, v){
     var pp_u$0 = utf_8(ppf) ? pp_u : pp;
     return caml_call2(pp_u$0, ppf, v);};
   }
   function pp_sgr(ppf, style){
    caml_call3(Stdlib_Format[17], ppf, 0, cst$16);
    caml_call3(Stdlib_Format[17], ppf, 0, style);
    return caml_call3(Stdlib_Format[17], ppf, 0, cst_m);
   }
   var
    curr_style =
      attr(function(_a__){return _a__;}, function(_a9_){return _a9_;}),
    cst_3 = "3",
    cst_0 = cst_0$0,
    cst_32 = cst_32$1,
    cst_36 = cst_36$1,
    cst_34 = cst_34$1,
    cst_1 = "1",
    cst_4 = "4",
    cst_2 = "2",
    cst_33 = cst_33$1,
    cst_31 = cst_31$1,
    cst_7 = "7",
    cst_35 = cst_35$1,
    cst_37 = cst_37$1,
    cst_30 = cst_30$1,
    cst_32$0 = cst_32$1,
    cst_36$0 = cst_36$1,
    cst_34$0 = cst_34$1,
    cst_33$0 = cst_33$1,
    cst_31$0 = cst_31$1,
    cst_37$0 = cst_37$1,
    cst_35$0 = cst_35$1,
    cst_30$0 = cst_30$1,
    cst_92 = "92",
    cst_96 = "96",
    cst_94 = "94",
    cst_93 = "93",
    cst_91 = "91",
    cst_97 = "97",
    cst_95 = "95",
    cst_90 = "90",
    cst_42 = "42",
    cst_46 = "46",
    cst_44 = "44",
    cst_43 = "43",
    cst_41 = "41",
    cst_47 = "47",
    cst_45 = "45",
    cst_40 = "40",
    cst_102 = "102",
    cst_106 = "106",
    cst_104 = "104",
    cst_103 = "103",
    cst_101 = "101",
    cst_107 = "107",
    cst_105 = "105",
    cst_100 = "100",
    _aM_ = [0, 15713, 82908052],
    _aN_ =
      [0,
       [18, [1, [0, [11, cst_1$0, 0], cst_1$0]], [15, [15, [15, [17, 0, 0]]]]],
       "@[<1>%a%a%a@]"],
    _aO_ = [0, [15, 0], "%a"];
   function styled(style, pp_v, ppf, v){
    if(870530776 <= style_renderer(ppf)) return caml_call2(pp_v, ppf, v);
    var match = get(curr_style, ppf);
    if(match)
     var s = match[1], prev = s;
    else{set(curr_style, zero, ppf); var prev = zero;}
    if(typeof style === "number")
     var
      here =
        698610924 <= style
         ? 749039939
           <= style
           ? 870530776
             <= style
             ? 989373200 <= style ? cst_3 : cst_0
             : 756711075 <= style ? cst_32 : cst_36
           : 737308346 === style ? cst_34 : 737455525 <= style ? cst_1 : cst_4
         : -397582078
           <= style
           ? 82908052
             <= style
             ? 242899572 <= style ? cst_2 : cst_33
             : 4100401 <= style ? cst_31 : cst_7
           : -605101559
             === style
             ? cst_35
             : -588596599 <= style ? cst_37 : cst_30;
    else if(15713 <= style[1]){
     var _a5_ = style[2];
     if(typeof _a5_ === "number")
      var
       here =
         82908052 <= _a5_
          ? 749039939
            <= _a5_
            ? 756711075 <= _a5_ ? cst_32$0 : cst_36$0
            : 737308346 <= _a5_ ? cst_34$0 : cst_33$0
          : -588596599
            <= _a5_
            ? 4100401 <= _a5_ ? cst_31$0 : cst_37$0
            : -605101559 <= _a5_ ? cst_35$0 : cst_30$0;
     else
      var
       _a6_ = _a5_[2],
       here =
         82908052 <= _a6_
          ? 749039939
            <= _a6_
            ? 756711075 <= _a6_ ? cst_92 : cst_96
            : 737308346 <= _a6_ ? cst_94 : cst_93
          : -588596599
            <= _a6_
            ? 4100401 <= _a6_ ? cst_91 : cst_97
            : -605101559 <= _a6_ ? cst_95 : cst_90;
    }
    else{
     var _a7_ = style[2];
     if(typeof _a7_ === "number")
      var
       here =
         82908052 <= _a7_
          ? 749039939
            <= _a7_
            ? 756711075 <= _a7_ ? cst_42 : cst_46
            : 737308346 <= _a7_ ? cst_44 : cst_43
          : -588596599
            <= _a7_
            ? 4100401 <= _a7_ ? cst_41 : cst_47
            : -605101559 <= _a7_ ? cst_45 : cst_40;
     else
      var
       _a8_ = _a7_[2],
       here =
         82908052 <= _a8_
          ? 749039939
            <= _a8_
            ? 756711075 <= _a8_ ? cst_102 : cst_106
            : 737308346 <= _a8_ ? cst_104 : cst_103
          : -588596599
            <= _a8_
            ? 4100401 <= _a8_ ? cst_101 : cst_107
            : -605101559 <= _a8_ ? cst_105 : cst_100;
    }
    a:
    {
     if(typeof style === "number" && 870530776 === style){var curr = here; break a;}
     var curr = caml_call2(Stdlib_String[7], cst$17, [0, prev, [0, here, 0]]);
    }
    function finally$0(param){return set(curr_style, prev, ppf);}
    set(curr_style, curr, ppf);
    return caml_call1
            (caml_call1(Stdlib_Fun[5], finally$0),
             function(param){
              pp_sgr(ppf, here);
              caml_call2(pp_v, ppf, v);
              return pp_sgr(ppf, prev);
             });
   }
   function id$0(_a4_){return _a4_;}
   function label(_a2_, _a3_){return styled(_aM_, string, _a2_, _a3_);}
   function field$0(_a0_, opt, l, prj, pp_v, ppf, v){
    var
     label$0 = _a0_ ? _a0_[1] : label,
     sep =
       opt ? opt[1] : function(ppf, _a1_){return caml_call2(pf, ppf, fmt$13);};
    return caml_call8
            (pf, ppf, _aN_, label$0, l, sep, 0, pp_v, caml_call1(prj, v));
   }
   function record$0(opt, pps){
    var sep = opt ? opt[1] : cut, _aT_ = [0, sep];
    function _aU_(_aY_, _aZ_){return concat(_aT_, pps, _aY_, _aZ_);}
    var _aV_ = 0;
    return function(_aW_, _aX_){return vbox(_aV_, _aU_, _aW_, _aX_);};
   }
   function of_to_string(f, ppf, v){
    return caml_call2(string, ppf, caml_call1(f, v));
   }
   function to_to_string(pp_v, v){return caml_call3(str, _aO_, pp_v, v);}
   function prefix(pp_p, pp_v, ppf, v){
    caml_call2(pp_p, ppf, 0);
    return caml_call2(pp_v, ppf, v);
   }
   function suffix(pp_s, pp_v, ppf, v){
    caml_call2(pp_v, ppf, v);
    return caml_call2(pp_s, ppf, 0);
   }
   function styled_unit(style, fmt){
    function _aP_(ppf, _aS_){return caml_call2(pf, ppf, fmt);}
    return function(_aQ_, _aR_){return styled(style, _aP_, _aQ_, _aR_);};
   }
   var
    Fmt =
      [0,
       stdout,
       stderr,
       pf,
       pr,
       epr,
       str,
       kpf,
       kstr,
       str_like,
       with_buffer,
       failwith,
       failwith_notrace,
       invalid_arg,
       error,
       error_msg,
       flush,
       nop,
       any,
       using,
       const$0,
       fmt,
       cut,
       sp,
       sps,
       comma,
       semi,
       append,
       append,
       concat,
       iter,
       iter_bindings,
       box,
       hbox,
       vbox,
       hvbox,
       hovbox,
       parens,
       brackets,
       braces,
       quote,
       id$0,
       field$0,
       record$0,
       bool,
       int$0,
       nativeint,
       int32,
       int64,
       uint,
       unativeint,
       uint32,
       uint64,
       float$0,
       float_dfrac,
       float_dsig,
       char$0,
       string,
       buffer,
       exn,
       exn_backtrace,
       pair,
       option,
       result,
       list,
       array,
       seq,
       hashtbl,
       queue,
       stack,
       [0,
        signal,
        uchar,
        string$0,
        pair$0,
        option$0,
        result$0,
        list$0,
        array$0,
        seq$0,
        hashtbl$0,
        queue$0,
        stack$0,
        field,
        record,
        iter$0,
        iter_bindings$0],
       si_size,
       byte_size,
       bi_byte_size,
       uint64_ns_span,
       on_bytes,
       on_string,
       ascii,
       octets,
       addresses,
       hex,
       words,
       paragraphs,
       text,
       lines,
       truncated,
       text_loc,
       one_of,
       did_you_mean,
       if_utf_8,
       utf_8,
       set_utf_8,
       styled,
       style_renderer,
       set_style_renderer,
       of_to_string,
       to_to_string,
       str,
       kstr,
       str_like,
       any,
       any,
       prefix,
       suffix,
       styled_unit];
   runtime.caml_register_global(267, Fmt, "Fmt");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJmbXQuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbXSwic291cmNlcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCLE8saUM7O0ksTyw2Qix3QjtHOzZCLE8saUM7O0ksTyw2QixjO0c7O0ksTyw2Qiw0QjtHOzhCLE8sc0M7MEIsUztpQyxPLHlCOztJLE8sb0I7Rzt5QyxPLHlCOzBCLE8seUI7NEIsTyxzQzsyQixPLHNDOztJLE87Rzs7STtJO0c7O0k7STtHOztJLGlDOztLLHNDO0ssTztJO0ksTzs7O0ksaUM7O0ssc0M7SyxPO0k7SSxPOzs7STtJLE87Rzs7STs7OytCLDhCOzs7Rzs7O0k7STtJLE87OztJO0k7SSxPO0c7OztJO0k7SSxPOzs7O0k7STtJLE87Ozs7STtJO0ksTzs7O0k7STtJLE87Rzs7STtLOztJLDRCO0c7O0k7Szs7SSw0QjtHOztJO0s7O0ksNEI7Rzs7O0k7SyxPO0k7SSwwQjtJLDBCO0ksNEI7Ozs7Ozs7Ozs7Ozs4QixPLDRCOzBCLE8sNEI7MEIsTyw0Qjt5QixPLDRCOzJCLE8sNEI7MkIsTyw0QjsrQixPLDRCOzs7Ozs7Ozs7Ozs7Ozs7SSxPLHdCO0c7O0ksTyx3QjtHOzs7O0s7SztNLE87O0s7O08sTzs7O2dCO00sVTtPOzs7UztPO08sSTs7OztXOztJO0ksTzs7Ozs7OzthOzs0QixPLDRCOztJLE8sMkI7SSxRO0ksTztHOztJLE87Rzs7STs7O0s7TSxJLGMsVyx5Qjs7SSxPO0c7OztJO0k7SSxPOzs7O2dCLE87O0ksTzs7O0kscUMsTzs7SSxPOzs7STtJLDRCO0c7O0k7SSw0QjtHOztJO0ksNEI7Rzs7STtJO0s7Rzs7STtJLDRCO0c7O0k7SSw0QjtHO0c7STs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0ksWTtnQixPOztJLE87Rzs7SSxPLHlCO0c7NkIsTyw0Qjs7STtJLHNCO0k7O2M7OztHOztJLFksTzs7SSxPOzs7STs7SyxPOzs7SSxPOzs7STtJLDBCO0k7STs7Yzs7O0c7O0ksSSwyQjtJOztjOzs7Rzs7STtJOzs7b0M7Rzs7STs7Szs7OzhCO0k7Szs7SSw0QjtHOztJO0k7OztvQztHOztJOztpQyxPOzs7Rzs7STs7aUMsTzs7Rzs7STs7aUMsTzs7Rzs7O0ksTyx5Qzs7O0ksbUMsTztJLDBCO0k7SSwwQjtJO0s7O0ksNEI7Rzs7STtJO21CO0ssSTs7OztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJO0k7O2MsTzs7Ozs7TTs7TyxzQjs7Ozs7Ozs7OztNO087Ozs7TSxPOzs7Ozs7O0s7TTs7O0s7O00sZ0IsTzs7Ozs7TTs7OztPO00saUIsTztNLGdCLE87Ozs7O007Ozs7TztNLG1CLE87TTs7aUI7aUI7Ozs7O0c7OEIsaUM7O0k7SSw2QjtJLDRCLHdDOztpQixPOzs7O0s7ZTtlOzs7OztLO2U7ZTs7Ozs7SztlO2U7Ozs7O0s7ZTtlOzs7STtjO2M7Rzs7SSxPOzthO2E7Rzs7SSxHO0s7STtLO087UyxlO0ssSSxrQjtJLHFDO0c7O0ksTztnQixlO0c7O3VCLDJDO0ksSSxpQztJO0s7TTtROztXO00sUztLO00sTztLO00sTzs7Szs7STtLO007TTtNO007UTs7Vzs7TSxPO0s7TSxPO0s7O1E7VSw0QjtLO00sTzs7Szs7STtLO0s7SztLO087O1U7O0ssTztJO0ssTztpQztlO2tDO2U7STs7TztTLDRCO0k7SyxPOztJO0c7OztJLEksOEI7SSxHO0ssTztJO0s7SztLO087O1U7STtLLE87STs7TztTLHlCO0k7SyxPOztJO0c7O0ksa0IsNkM7SSxzQixPO0k7SztNLE87OztLOztJO0s7TSxPOzs7Szs7STtLO00sTzs7O0s7O0k7SztNLE87Ozs7Szs7Ozs7Ozs7OztJO0s7TSxPOzs7O0s7Ozs7Ozs7Ozs7STtLO00sTzs7OztLOzs7SSxJLG1DO0ksRztLLE87STtLO0s7SztPOztVO0k7YywwQjtjO0c7O0k7OztJLGtDOzs7O00saUI7TTs7Ozs7Ozs7STtLO0c7O0k7OzJCO0c7RyxxQzs7STs7MkI7RztHLG9DO0c7STs7NkIsTzs7K0IsTzs7aUMsTzs7bUMsTzs7c0MsTzs7d0MsTzs7MEMsTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TTtrQyxPOzs7OzRCLE87SyxPOztJOzs7Ozs7STtLO21CO0k7OztLO0ssTzs7STs7Ozs7TTtNO007Ozs7Ozs7OztJOzs7Szs7TTtROzswQiwwQzs7Ozs7Z0MsTzs7OztTO1MsTzs7Ozs7SztLOztJOzs7Szs7OztTO1M7aUI7NkIsTyw2QjtRO0s7STs7Ozs7Ozs7Ozs7OztLO0s7Szs7SztJLDBCO1EsVTtJLDBCO0k7STtLOzs7O1EsZTtJO0s7O3FCLHdCOztJLDZCO0k7Rzs7STs7O0s7O0k7Rzt5Qix1Qjs7STtJO0c7O0k7STt1QjtLLEcsZ0IsOEI7Ozs7Rzs7SSxtQjtrQzs7Rzs7STs7SztzQjs7STtLOztNO00sTzs7SztLO0s7dUI7Szs7O0c7O0k7O0s7c0I7O0k7Szs7TTtNLE87O0s7SztLO3VCO0ssVTtNO3dCO00sVTtPO3lCO087Tzs7O1c7O1U7O0c7O0k7STtLOztNO00sTzs7SztLO0ssWTs7TTs7O08sTTtNOztLOzs7Rzs7STtJO0s7O007TSxPOztLO0s7SztLOzs7Rzs7STtLLE87SSx3Qjs7OztNLFc7TTtNOzs7OztJLE87Rzs7Ozs7Ozs7OytCLE87SSxPOzs7O2EsTzs7ZSxPOzs7Ozs7OztXLE07OzJCLE87O1U7Ozs7SyxPOzs7SSxPOzs7Ozs7OzhCLE87Ozs7STtLLE87O0ksTzs7Ozs7Ozs7Ozs7a0M7OztHLDBEOzJCLFMsNEI7RztJO0k7Ozs7OztJLFc7SSxPO0c7O0ksbUI7OEI7OztJO2lFO0s7TSxPO007TTs7Szs7O1M7VSxxQixPO1UsTzs7dUMsTztTOzs7OztVO1UsTztrQjtTOztLOzs7OztHOzBCLFksNEI7dUIsNkI7RztJLHNCOztLLE07STtHO0c7STs7Ozt1QixvQzs4QiwrQjt5QiwwQztHO0ksc0I7O0ssTTtJO0c7RyxJOztJO0c7O0k7Rzs7SSxVO0ksVztJLHNCLE87STtJO0c7O0k7SyxNO0s7STtLO0ssUTtLO0s7STtJLE87Rzs7STtLO0ssTywyQjtHOztJO0k7SSxPO0c7RztJOzBCLDhCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SSxxQyxPO0k7OztTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0I7OzhCLGtDO0k7SSxPO2E7O2M7Yzs7YTtHO3VCO0csMkI7Ozs7OzBDLE87SSxPO3NEOzs7a0M7SSwwQjtJO0ksNEI7OztJLE8sd0I7RztrQyxPLCtCOztJO0ksTztHOztJO0ksTztHOztJLHlCLE87SSw0QjtHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RSIsInNvdXJjZXNDb250ZW50IjpbXX0=
